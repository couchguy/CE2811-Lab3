
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00000f44  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000001a0  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002ad  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000021b1  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000121d  00000000  00000000  000036be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000140f  00000000  00000000  000048db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000290  00000000  00000000  00005cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000419  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a54  00000000  00000000  00006395  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00006de9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "keypad.h"
#include "lcd.h"

int main(void)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17

	
	lcd_init(); 	//initalizes the LCD Screen
  86:	0e 94 38 01 	call	0x270	; 0x270 <lcd_init>
	keypad_init(); 	//initalizes the keypad
  8a:	0e 94 87 00 	call	0x10e	; 0x10e <keypad_init>
  8e:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t counter = 0;
	
	while(1)
	{
		uint8_t digit = getkey();
  90:	0e 94 8c 00 	call	0x118	; 0x118 <getkey>
  94:	18 2f       	mov	r17, r24
		delay_ms(100);
  96:	84 e6       	ldi	r24, 0x64	; 100
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 6f 00 	call	0xde	; 0xde <delay_ms>
		lcd_char(digit);
  9e:	81 2f       	mov	r24, r17
  a0:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_char>
		counter++;
  a4:	0f 5f       	subi	r16, 0xFF	; 255
		if(counter == 16)
  a6:	00 31       	cpi	r16, 0x10	; 16
  a8:	99 f7       	brne	.-26     	; 0x90 <main+0xe>
		{
			counter = 0;
			lcd_char(CR);
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_char>
  b0:	ee cf       	rjmp	.-36     	; 0x8e <main+0xc>

000000b2 <delay_us>:
// max value for us is 65535/4*CYCLES_PER_US
// which is app. 17777 for 14.7456MHZ
void delay_us(uint16_t us)
{
	uint16_t _count;
	_count=us/4*CYCLES_PER_US;
  b2:	96 95       	lsr	r25
  b4:	87 95       	ror	r24
  b6:	96 95       	lsr	r25
  b8:	87 95       	ror	r24
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__floatunsisf>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e8       	ldi	r20, 0x80	; 128
  cc:	51 e4       	ldi	r21, 0x41	; 65
  ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
  d2:	0e 94 a7 01 	call	0x34e	; 0x34e <__fixunssfsi>
	
	asm volatile (
  d6:	cb 01       	movw	r24, r22
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <delay_us+0x26>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (_count)
		: "0" (_count)
	);
}
  dc:	08 95       	ret

000000de <delay_ms>:

// delay for ms milli-seconds 
// delay times are only half-way accurate if optimization is turned on!

void delay_ms(uint16_t ms) 
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	00 d0       	rcall	.+0      	; 0xe4 <delay_ms+0x6>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <delay_ms+0x1a>
	volatile uint16_t i;

	for(i=ms;i>0;i--)
	{
		delay_us(1000);
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	0e 94 59 00 	call	0xb2	; 0xb2 <delay_us>

void delay_ms(uint16_t ms) 
{
	volatile uint16_t i;

	for(i=ms;i>0;i--)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	89 2b       	or	r24, r25
 102:	99 f7       	brne	.-26     	; 0xea <delay_ms+0xc>
	{
		delay_us(1000);
	}
} 
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <keypad_init>:
*	Returns: Void
*	
*******************************************************************/
void keypad_init(void) {

	KEYPAD_PORT = (KEYPAD_ROWS | KEYPAD_COLS);
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_DDR = KEYPAD_ROWS;
 112:	8b e8       	ldi	r24, 0x8B	; 139
 114:	8a bb       	out	0x1a, r24	; 26

}
 116:	08 95       	ret

00000118 <getkey>:
*				key that was press ont he keypad
*	Parameters: Void
*	Returns: uint8_t
*	
*******************************************************************/
uint8_t getkey(void) {
 118:	6f 92       	push	r6
 11a:	7f 92       	push	r7
 11c:	8f 92       	push	r8
 11e:	9f 92       	push	r9
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	00 d0       	rcall	.+0      	; 0x136 <getkey+0x1e>
 136:	00 d0       	rcall	.+0      	; 0x138 <getkey+0x20>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
*	Returns: uint8_t
*	
*******************************************************************/
static uint8_t scan(void) {
	uint8_t row[ROW_COUNT]; 
		row[0] = KEYPAD_ROW1;
 13c:	60 e8       	ldi	r22, 0x80	; 128
 13e:	66 2e       	mov	r6, r22
		row[1] = KEYPAD_ROW2;
 140:	77 24       	eor	r7, r7
 142:	73 94       	inc	r7
		row[2] = KEYPAD_ROW3; 
 144:	52 e0       	ldi	r21, 0x02	; 2
 146:	85 2e       	mov	r8, r21
		row[3] = KEYPAD_ROW4;
 148:	48 e0       	ldi	r20, 0x08	; 8
 14a:	94 2e       	mov	r9, r20
 14c:	5e 01       	movw	r10, r28
 14e:	08 94       	sec
 150:	a1 1c       	adc	r10, r1
 152:	b1 1c       	adc	r11, r1
	
	uint8_t scanCode = 0;
	for(int i = 0; i < ROW_COUNT; i++) {
 154:	35 e0       	ldi	r19, 0x05	; 5
 156:	c3 2e       	mov	r12, r19
 158:	d1 2c       	mov	r13, r1
 15a:	cc 0e       	add	r12, r28
 15c:	dd 1e       	adc	r13, r29
*	Returns: uint8_t
*	
*******************************************************************/
static uint8_t scan(void) {
	uint8_t row[ROW_COUNT]; 
		row[0] = KEYPAD_ROW1;
 15e:	69 82       	std	Y+1, r6	; 0x01
		row[1] = KEYPAD_ROW2;
 160:	7a 82       	std	Y+2, r7	; 0x02
		row[2] = KEYPAD_ROW3; 
 162:	8b 82       	std	Y+3, r8	; 0x03
		row[3] = KEYPAD_ROW4;
 164:	9c 82       	std	Y+4, r9	; 0x04
 166:	75 01       	movw	r14, r10
	
	uint8_t scanCode = 0;
	for(int i = 0; i < ROW_COUNT; i++) {
		KEYPAD_PORT = 0b11111111 ^ row[i];
 168:	f7 01       	movw	r30, r14
 16a:	10 81       	ld	r17, Z
 16c:	81 2f       	mov	r24, r17
 16e:	80 95       	com	r24
 170:	8b bb       	out	0x1b, r24	; 27
		delay_ms(10);
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 6f 00 	call	0xde	; 0xde <delay_ms>
		
		scanCode = KEYPAD_PIN;
 17a:	09 b3       	in	r16, 0x19	; 25
		delay_ms(5);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 6f 00 	call	0xde	; 0xde <delay_ms>
		//this gets what column is pressed
		uint8_t col = scanCode | row[i];
		//now the column is '0' everything else is '1'

		//if something was pressed
		if(!(col == 0xFF)){
 184:	10 2b       	or	r17, r16
 186:	1f 3f       	cpi	r17, 0xFF	; 255
 188:	39 f4       	brne	.+14     	; 0x198 <getkey+0x80>
 18a:	08 94       	sec
 18c:	e1 1c       	adc	r14, r1
 18e:	f1 1c       	adc	r15, r1
		row[1] = KEYPAD_ROW2;
		row[2] = KEYPAD_ROW3; 
		row[3] = KEYPAD_ROW4;
	
	uint8_t scanCode = 0;
	for(int i = 0; i < ROW_COUNT; i++) {
 190:	ec 14       	cp	r14, r12
 192:	fd 04       	cpc	r15, r13
 194:	49 f7       	brne	.-46     	; 0x168 <getkey+0x50>
 196:	0f ef       	ldi	r16, 0xFF	; 255

	uint8_t test = 1;
	uint8_t returnValue;
	while (test){
		uint8_t key = scan();
		delay_ms(500);
 198:	84 ef       	ldi	r24, 0xF4	; 244
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 6f 00 	call	0xde	; 0xde <delay_ms>
		
		switch(key) {
 1a0:	07 3d       	cpi	r16, 0xD7	; 215
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <getkey+0x8e>
 1a4:	4c c0       	rjmp	.+152    	; 0x23e <getkey+0x126>
 1a6:	08 3d       	cpi	r16, 0xD8	; 216
 1a8:	90 f4       	brcc	.+36     	; 0x1ce <getkey+0xb6>
 1aa:	0b 37       	cpi	r16, 0x7B	; 123
 1ac:	51 f1       	breq	.+84     	; 0x202 <getkey+0xea>
 1ae:	0c 37       	cpi	r16, 0x7C	; 124
 1b0:	38 f4       	brcc	.+14     	; 0x1c0 <getkey+0xa8>
 1b2:	0f 35       	cpi	r16, 0x5F	; 95
 1b4:	61 f1       	breq	.+88     	; 0x20e <getkey+0xf6>
 1b6:	0f 36       	cpi	r16, 0x6F	; 111
 1b8:	41 f1       	breq	.+80     	; 0x20a <getkey+0xf2>
 1ba:	0f 33       	cpi	r16, 0x3F	; 63
 1bc:	81 f6       	brne	.-96     	; 0x15e <getkey+0x46>
 1be:	35 c0       	rjmp	.+106    	; 0x22a <getkey+0x112>
 1c0:	0d 3b       	cpi	r16, 0xBD	; 189
 1c2:	b9 f1       	breq	.+110    	; 0x232 <getkey+0x11a>
 1c4:	0e 3b       	cpi	r16, 0xBE	; 190
 1c6:	99 f1       	breq	.+102    	; 0x22e <getkey+0x116>
 1c8:	07 3b       	cpi	r16, 0xB7	; 183
 1ca:	49 f6       	brne	.-110    	; 0x15e <getkey+0x46>
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <getkey+0x11e>
 1ce:	0d 3e       	cpi	r16, 0xED	; 237
 1d0:	41 f1       	breq	.+80     	; 0x222 <getkey+0x10a>
 1d2:	0e 3e       	cpi	r16, 0xEE	; 238
 1d4:	40 f4       	brcc	.+16     	; 0x1e6 <getkey+0xce>
 1d6:	0e 3d       	cpi	r16, 0xDE	; 222
 1d8:	01 f1       	breq	.+64     	; 0x21a <getkey+0x102>
 1da:	07 3e       	cpi	r16, 0xE7	; 231
 1dc:	a1 f0       	breq	.+40     	; 0x206 <getkey+0xee>
 1de:	0d 3d       	cpi	r16, 0xDD	; 221
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <getkey+0xcc>
 1e2:	bd cf       	rjmp	.-134    	; 0x15e <getkey+0x46>
 1e4:	20 c0       	rjmp	.+64     	; 0x226 <getkey+0x10e>
 1e6:	03 3f       	cpi	r16, 0xF3	; 243
 1e8:	41 f1       	breq	.+80     	; 0x23a <getkey+0x122>
 1ea:	04 3f       	cpi	r16, 0xF4	; 244
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <getkey+0xde>
 1ee:	0e 3e       	cpi	r16, 0xEE	; 238
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <getkey+0xdc>
 1f2:	b5 cf       	rjmp	.-150    	; 0x15e <getkey+0x46>
 1f4:	10 c0       	rjmp	.+32     	; 0x216 <getkey+0xfe>
 1f6:	09 3f       	cpi	r16, 0xF9	; 249
 1f8:	91 f0       	breq	.+36     	; 0x21e <getkey+0x106>
 1fa:	0a 3f       	cpi	r16, 0xFA	; 250
 1fc:	09 f0       	breq	.+2      	; 0x200 <getkey+0xe8>
 1fe:	af cf       	rjmp	.-162    	; 0x15e <getkey+0x46>
 200:	08 c0       	rjmp	.+16     	; 0x212 <getkey+0xfa>
 202:	11 e3       	ldi	r17, 0x31	; 49
 204:	1d c0       	rjmp	.+58     	; 0x240 <getkey+0x128>
 206:	10 e3       	ldi	r17, 0x30	; 48
 208:	1b c0       	rjmp	.+54     	; 0x240 <getkey+0x128>
 20a:	12 e3       	ldi	r17, 0x32	; 50
 20c:	19 c0       	rjmp	.+50     	; 0x240 <getkey+0x128>
				break;

			case TWO:
				test = 0;
				returnValue = ASCII_TWO;
				break;
 20e:	13 e3       	ldi	r17, 0x33	; 51
 210:	17 c0       	rjmp	.+46     	; 0x240 <getkey+0x128>

			case THREE:
				test = 0;
				returnValue = ASCII_THREE;
				break;
 212:	14 e3       	ldi	r17, 0x34	; 52
 214:	15 c0       	rjmp	.+42     	; 0x240 <getkey+0x128>

			case FOUR:
				test = 0;
				returnValue = ASCII_FOUR;
				break;
 216:	15 e3       	ldi	r17, 0x35	; 53
 218:	13 c0       	rjmp	.+38     	; 0x240 <getkey+0x128>

			case FIVE:
				test = 0;
				returnValue = ASCII_FIVE;
				break;
 21a:	16 e3       	ldi	r17, 0x36	; 54
 21c:	11 c0       	rjmp	.+34     	; 0x240 <getkey+0x128>
				
			case SIX:
				test = 0;
				returnValue = ASCII_SIX;
				break;
 21e:	17 e3       	ldi	r17, 0x37	; 55
 220:	0f c0       	rjmp	.+30     	; 0x240 <getkey+0x128>
				
			case SEVEN:
				test = 0;
				returnValue = ASCII_SEVEN;
				break;
 222:	18 e3       	ldi	r17, 0x38	; 56
 224:	0d c0       	rjmp	.+26     	; 0x240 <getkey+0x128>
				
			case EIGHT:
				test = 0;
				returnValue = ASCII_EIGHT;
				break;
 226:	19 e3       	ldi	r17, 0x39	; 57
 228:	0b c0       	rjmp	.+22     	; 0x240 <getkey+0x128>
				
			case NINE:
				test = 0;
				returnValue = ASCII_NINE;
				break;
 22a:	11 e4       	ldi	r17, 0x41	; 65
 22c:	09 c0       	rjmp	.+18     	; 0x240 <getkey+0x128>

				
			case LET_A:
				test = 0;
				returnValue = ASCII_LET_A;
				break;
 22e:	12 e4       	ldi	r17, 0x42	; 66
 230:	07 c0       	rjmp	.+14     	; 0x240 <getkey+0x128>
				
			case LET_B:
				test = 0;
				returnValue = ASCII_LET_B;
				break;
 232:	13 e4       	ldi	r17, 0x43	; 67
 234:	05 c0       	rjmp	.+10     	; 0x240 <getkey+0x128>
				
			case LET_C:
				test = 0;
				returnValue = ASCII_LET_C;
				break;
 236:	14 e4       	ldi	r17, 0x44	; 68
 238:	03 c0       	rjmp	.+6      	; 0x240 <getkey+0x128>
				
			case LET_D:
				test = 0;
				returnValue = ASCII_LET_D;
				break;
 23a:	1a e2       	ldi	r17, 0x2A	; 42
 23c:	01 c0       	rjmp	.+2      	; 0x240 <getkey+0x128>
				
			case STAR:
				test = 0;
				returnValue = ASCII_STAR;
				break;
 23e:	13 e2       	ldi	r17, 0x23	; 35
			defalut:
		 		test = 1;
				break;
		}
	}
	delay_ms(100);
 240:	84 e6       	ldi	r24, 0x64	; 100
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6f 00 	call	0xde	; 0xde <delay_ms>
	
	return returnValue;

}
 248:	81 2f       	mov	r24, r17
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	bf 90       	pop	r11
 264:	af 90       	pop	r10
 266:	9f 90       	pop	r9
 268:	8f 90       	pop	r8
 26a:	7f 90       	pop	r7
 26c:	6f 90       	pop	r6
 26e:	08 95       	ret

00000270 <lcd_init>:
*	Returns: void
*	
*******************************************************************/
void lcd_init(void)
{
	UBRRH = 0;
 270:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VAL; 					// 9600 baud
 272:	87 e6       	ldi	r24, 0x67	; 103
 274:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN)|(1<<RXEN);	// Enable Tx and Rx
 276:	88 e1       	ldi	r24, 0x18	; 24
 278:	8a b9       	out	0x0a, r24	; 10
}
 27a:	08 95       	ret

0000027c <lcd_char>:
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 27c:	5d 9b       	sbis	0x0b, 5	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <lcd_char>
		UDR = x;					// Send char
 280:	8c b9       	out	0x0c, r24	; 12
}
 282:	08 95       	ret

00000284 <lcd_string>:
*		string
*	Returns: void
*	
*******************************************************************/
void lcd_string(char *c)
{
 284:	fc 01       	movw	r30, r24
 286:	04 c0       	rjmp	.+8      	; 0x290 <lcd_string+0xc>
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 288:	5d 9b       	sbis	0x0b, 5	; 11
 28a:	fe cf       	rjmp	.-4      	; 0x288 <lcd_string+0x4>
		UDR = x;					// Send char
 28c:	8c b9       	out	0x0c, r24	; 12
 28e:	31 96       	adiw	r30, 0x01	; 1
*	Returns: void
*	
*******************************************************************/
void lcd_string(char *c)
{
	for(int i=0; c[i] != 0; i++)
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	c9 f7       	brne	.-14     	; 0x288 <lcd_string+0x4>
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <lcd_string+0x12>
		UDR = x;					// Send char
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	8c b9       	out	0x0c, r24	; 12
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 29e:	5d 9b       	sbis	0x0b, 5	; 11
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <lcd_string+0x1a>
		UDR = x;					// Send char
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	8c b9       	out	0x0c, r24	; 12
	{
		lcd_char(c[i]);
	}
	lcd_char(CR);
	lcd_char(LF);
}
 2a6:	08 95       	ret

000002a8 <lcd_gotoxy>:
*		(0,0) is the upper left, 0 <= x or y <= 15
*	Returns: void
*	
*******************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 2a8:	98 2f       	mov	r25, r24
	uint8_t output = 128; //cursor at line 0 position 0
	//makes sure the x and y corridnates fit within the lcd screen
	if((x <= 1) && (y <= 15))
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	48 f4       	brcc	.+18     	; 0x2c0 <lcd_gotoxy+0x18>
 2ae:	60 31       	cpi	r22, 0x10	; 16
 2b0:	38 f4       	brcc	.+14     	; 0x2c0 <lcd_gotoxy+0x18>
	{
		//0 line is 128 + y for each position
		//1 line is 148 + y for each position
		output += (x*20) + y;
 2b2:	60 58       	subi	r22, 0x80	; 128
 2b4:	84 e1       	ldi	r24, 0x14	; 20
 2b6:	98 9f       	mul	r25, r24
 2b8:	c0 01       	movw	r24, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	68 0f       	add	r22, r24
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <lcd_gotoxy+0x1a>
 2c0:	60 e8       	ldi	r22, 0x80	; 128
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2c2:	5d 9b       	sbis	0x0b, 5	; 11
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <lcd_gotoxy+0x1a>
		UDR = x;					// Send char
 2c6:	6c b9       	out	0x0c, r22	; 12
		//0 line is 128 + y for each position
		//1 line is 148 + y for each position
		output += (x*20) + y;
	}
	lcd_char(output);
}
 2c8:	08 95       	ret

000002ca <lcd_clear>:
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2ca:	5d 9b       	sbis	0x0b, 5	; 11
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <lcd_clear>
		UDR = x;					// Send char
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
 2d0:	8c b9       	out	0x0c, r24	; 12
*	
*******************************************************************/
void lcd_clear(void)
{
	lcd_ff();
}
 2d2:	08 95       	ret

000002d4 <lcd_ff>:
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2d4:	5d 9b       	sbis	0x0b, 5	; 11
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <lcd_ff>
		UDR = x;					// Send char
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	8c b9       	out	0x0c, r24	; 12
*	
*******************************************************************/
void lcd_ff(void)
{
	lcd_char(FF);
}
 2dc:	08 95       	ret

000002de <lcd_left>:
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2de:	5d 9b       	sbis	0x0b, 5	; 11
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <lcd_left>
		UDR = x;					// Send char
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	8c b9       	out	0x0c, r24	; 12
*	
*******************************************************************/
void lcd_left(void)
{
	lcd_char(BS);
}
 2e6:	08 95       	ret

000002e8 <lcd_backlight>:
*******************************************************************/
void lcd_backlight(char state)
{
	// sets the light to ON as default
	uint8_t backlight = LIGHTON;
	if ( state == '0' )
 2e8:	80 33       	cpi	r24, 0x30	; 48
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <lcd_backlight+0x8>
 2ec:	82 e1       	ldi	r24, 0x12	; 18
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <lcd_backlight+0xa>
 2f0:	81 e1       	ldi	r24, 0x11	; 17
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2f2:	5d 9b       	sbis	0x0b, 5	; 11
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <lcd_backlight+0xa>
		UDR = x;					// Send char
 2f6:	8c b9       	out	0x0c, r24	; 12
	{
		// sets the light to off
		backlight = LIGHTOFF;
	}
	lcd_char(backlight);
}
 2f8:	08 95       	ret

000002fa <lcd_switch>:
*******************************************************************/
void lcd_switch(char state)
{
	// sets the power to OFF as default
	uint8_t power = DISPLAYOFF;
	if ( state == '1' )
 2fa:	81 33       	cpi	r24, 0x31	; 49
 2fc:	31 f4       	brne	.+12     	; 0x30a <lcd_switch+0x10>
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 2fe:	5d 9b       	sbis	0x0b, 5	; 11
 300:	fe cf       	rjmp	.-4      	; 0x2fe <lcd_switch+0x4>
		UDR = x;					// Send char
 302:	81 e1       	ldi	r24, 0x11	; 17
 304:	8c b9       	out	0x0c, r24	; 12
 306:	88 e1       	ldi	r24, 0x18	; 24
 308:	05 c0       	rjmp	.+10     	; 0x314 <lcd_switch+0x1a>
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 30a:	5d 9b       	sbis	0x0b, 5	; 11
 30c:	fe cf       	rjmp	.-4      	; 0x30a <lcd_switch+0x10>
		UDR = x;					// Send char
 30e:	82 e1       	ldi	r24, 0x12	; 18
 310:	8c b9       	out	0x0c, r24	; 12
 312:	85 e1       	ldi	r24, 0x15	; 21
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 314:	5d 9b       	sbis	0x0b, 5	; 11
 316:	fe cf       	rjmp	.-4      	; 0x314 <lcd_switch+0x1a>
		UDR = x;					// Send char
 318:	8c b9       	out	0x0c, r24	; 12
	{
		//When the Display goes off the back light will also go off.
		lcd_backlight(OFF);
	}
	lcd_char(power);
}
 31a:	08 95       	ret

0000031c <lcd_define_char>:
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 31c:	5d 9b       	sbis	0x0b, 5	; 11
 31e:	fe cf       	rjmp	.-4      	; 0x31c <lcd_define_char>
*	Returns: void
*	
*******************************************************************/
void lcd_define_char(uint8_t num, char *data)
{
	lcd_char(num+247);
 320:	89 50       	subi	r24, 0x09	; 9
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
		UDR = x;					// Send char
 322:	8c b9       	out	0x0c, r24	; 12
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
void lcd_define_char(uint8_t num, char *data)
{
	lcd_char(num+247);
	for(int i=0; i < 8; i++)
	{
		lcd_char(data[i]);
 328:	fb 01       	movw	r30, r22
 32a:	e8 0f       	add	r30, r24
 32c:	f9 1f       	adc	r31, r25
 32e:	e0 81       	ld	r30, Z
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 330:	5d 9b       	sbis	0x0b, 5	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <lcd_define_char+0x14>
		UDR = x;					// Send char
 334:	ec b9       	out	0x0c, r30	; 12
*	
*******************************************************************/
void lcd_define_char(uint8_t num, char *data)
{
	lcd_char(num+247);
	for(int i=0; i < 8; i++)
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	88 30       	cpi	r24, 0x08	; 8
 33a:	91 05       	cpc	r25, r1
 33c:	a9 f7       	brne	.-22     	; 0x328 <lcd_define_char+0xc>
	{
		lcd_char(data[i]);
	}
}
 33e:	08 95       	ret

00000340 <lcd_custom>:
*	Returns: void
*	
*******************************************************************/
void lcd_custom(uint8_t num)
{
	if(num <= 8)
 340:	89 30       	cpi	r24, 0x09	; 9
 342:	20 f4       	brcc	.+8      	; 0x34c <lcd_custom+0xc>
*	Returns: void
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
 344:	5d 9b       	sbis	0x0b, 5	; 11
 346:	fe cf       	rjmp	.-4      	; 0x344 <lcd_custom+0x4>
void lcd_custom(uint8_t num)
{
	if(num <= 8)
	//num works becasue the custom chars codes are 0-7
	//and will be stored in the same style
	lcd_char(num-1);
 348:	81 50       	subi	r24, 0x01	; 1
*	
*******************************************************************/	
void lcd_char(char x)
{
		while(!(UCSRA&(1<<UDRE)));	// Wait for UDR empty
		UDR = x;					// Send char
 34a:	8c b9       	out	0x0c, r24	; 12
 34c:	08 95       	ret

0000034e <__fixunssfsi>:
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	7b 01       	movw	r14, r22
 358:	8c 01       	movw	r16, r24
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	5f e4       	ldi	r21, 0x4F	; 79
 362:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gesf2>
 366:	88 23       	and	r24, r24
 368:	8c f0       	brlt	.+34     	; 0x38c <__fixunssfsi+0x3e>
 36a:	c8 01       	movw	r24, r16
 36c:	b7 01       	movw	r22, r14
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	5f e4       	ldi	r21, 0x4F	; 79
 376:	0e 94 1f 03 	call	0x63e	; 0x63e <__subsf3>
 37a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixsfsi>
 37e:	9b 01       	movw	r18, r22
 380:	ac 01       	movw	r20, r24
 382:	20 50       	subi	r18, 0x00	; 0
 384:	30 40       	sbci	r19, 0x00	; 0
 386:	40 40       	sbci	r20, 0x00	; 0
 388:	50 48       	sbci	r21, 0x80	; 128
 38a:	06 c0       	rjmp	.+12     	; 0x398 <__fixunssfsi+0x4a>
 38c:	c8 01       	movw	r24, r16
 38e:	b7 01       	movw	r22, r14
 390:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixsfsi>
 394:	9b 01       	movw	r18, r22
 396:	ac 01       	movw	r20, r24
 398:	b9 01       	movw	r22, r18
 39a:	ca 01       	movw	r24, r20
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <_fpadd_parts>:
 3a6:	a0 e0       	ldi	r26, 0x00	; 0
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e9 ed       	ldi	r30, 0xD9	; 217
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__prologue_saves__>
 3b2:	dc 01       	movw	r26, r24
 3b4:	2b 01       	movw	r4, r22
 3b6:	fa 01       	movw	r30, r20
 3b8:	9c 91       	ld	r25, X
 3ba:	92 30       	cpi	r25, 0x02	; 2
 3bc:	08 f4       	brcc	.+2      	; 0x3c0 <_fpadd_parts+0x1a>
 3be:	39 c1       	rjmp	.+626    	; 0x632 <_fpadd_parts+0x28c>
 3c0:	eb 01       	movw	r28, r22
 3c2:	88 81       	ld	r24, Y
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	08 f4       	brcc	.+2      	; 0x3ca <_fpadd_parts+0x24>
 3c8:	33 c1       	rjmp	.+614    	; 0x630 <_fpadd_parts+0x28a>
 3ca:	94 30       	cpi	r25, 0x04	; 4
 3cc:	69 f4       	brne	.+26     	; 0x3e8 <_fpadd_parts+0x42>
 3ce:	84 30       	cpi	r24, 0x04	; 4
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <_fpadd_parts+0x2e>
 3d2:	2f c1       	rjmp	.+606    	; 0x632 <_fpadd_parts+0x28c>
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	9c 91       	ld	r25, X
 3d8:	11 97       	sbiw	r26, 0x01	; 1
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	98 17       	cp	r25, r24
 3de:	09 f4       	brne	.+2      	; 0x3e2 <_fpadd_parts+0x3c>
 3e0:	28 c1       	rjmp	.+592    	; 0x632 <_fpadd_parts+0x28c>
 3e2:	a0 e6       	ldi	r26, 0x60	; 96
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	25 c1       	rjmp	.+586    	; 0x632 <_fpadd_parts+0x28c>
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	09 f4       	brne	.+2      	; 0x3ee <_fpadd_parts+0x48>
 3ec:	21 c1       	rjmp	.+578    	; 0x630 <_fpadd_parts+0x28a>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	a9 f4       	brne	.+42     	; 0x41c <_fpadd_parts+0x76>
 3f2:	92 30       	cpi	r25, 0x02	; 2
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <_fpadd_parts+0x52>
 3f6:	1d c1       	rjmp	.+570    	; 0x632 <_fpadd_parts+0x28c>
 3f8:	9a 01       	movw	r18, r20
 3fa:	ad 01       	movw	r20, r26
 3fc:	88 e0       	ldi	r24, 0x08	; 8
 3fe:	ea 01       	movw	r28, r20
 400:	09 90       	ld	r0, Y+
 402:	ae 01       	movw	r20, r28
 404:	e9 01       	movw	r28, r18
 406:	09 92       	st	Y+, r0
 408:	9e 01       	movw	r18, r28
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	c1 f7       	brne	.-16     	; 0x3fe <_fpadd_parts+0x58>
 40e:	e2 01       	movw	r28, r4
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	9c 91       	ld	r25, X
 416:	89 23       	and	r24, r25
 418:	81 83       	std	Z+1, r24	; 0x01
 41a:	08 c1       	rjmp	.+528    	; 0x62c <_fpadd_parts+0x286>
 41c:	92 30       	cpi	r25, 0x02	; 2
 41e:	09 f4       	brne	.+2      	; 0x422 <_fpadd_parts+0x7c>
 420:	07 c1       	rjmp	.+526    	; 0x630 <_fpadd_parts+0x28a>
 422:	12 96       	adiw	r26, 0x02	; 2
 424:	2d 90       	ld	r2, X+
 426:	3c 90       	ld	r3, X
 428:	13 97       	sbiw	r26, 0x03	; 3
 42a:	eb 01       	movw	r28, r22
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	9b 81       	ldd	r25, Y+3	; 0x03
 430:	14 96       	adiw	r26, 0x04	; 4
 432:	ad 90       	ld	r10, X+
 434:	bd 90       	ld	r11, X+
 436:	cd 90       	ld	r12, X+
 438:	dc 90       	ld	r13, X
 43a:	17 97       	sbiw	r26, 0x07	; 7
 43c:	ec 80       	ldd	r14, Y+4	; 0x04
 43e:	fd 80       	ldd	r15, Y+5	; 0x05
 440:	0e 81       	ldd	r16, Y+6	; 0x06
 442:	1f 81       	ldd	r17, Y+7	; 0x07
 444:	91 01       	movw	r18, r2
 446:	28 1b       	sub	r18, r24
 448:	39 0b       	sbc	r19, r25
 44a:	b9 01       	movw	r22, r18
 44c:	37 ff       	sbrs	r19, 7
 44e:	04 c0       	rjmp	.+8      	; 0x458 <_fpadd_parts+0xb2>
 450:	66 27       	eor	r22, r22
 452:	77 27       	eor	r23, r23
 454:	62 1b       	sub	r22, r18
 456:	73 0b       	sbc	r23, r19
 458:	60 32       	cpi	r22, 0x20	; 32
 45a:	71 05       	cpc	r23, r1
 45c:	0c f0       	brlt	.+2      	; 0x460 <_fpadd_parts+0xba>
 45e:	61 c0       	rjmp	.+194    	; 0x522 <_fpadd_parts+0x17c>
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	6c f5       	brge	.+90     	; 0x4c0 <_fpadd_parts+0x11a>
 466:	37 01       	movw	r6, r14
 468:	48 01       	movw	r8, r16
 46a:	06 2e       	mov	r0, r22
 46c:	04 c0       	rjmp	.+8      	; 0x476 <_fpadd_parts+0xd0>
 46e:	96 94       	lsr	r9
 470:	87 94       	ror	r8
 472:	77 94       	ror	r7
 474:	67 94       	ror	r6
 476:	0a 94       	dec	r0
 478:	d2 f7       	brpl	.-12     	; 0x46e <_fpadd_parts+0xc8>
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	04 c0       	rjmp	.+8      	; 0x48c <_fpadd_parts+0xe6>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	44 1f       	adc	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	6a 95       	dec	r22
 48e:	d2 f7       	brpl	.-12     	; 0x484 <_fpadd_parts+0xde>
 490:	21 50       	subi	r18, 0x01	; 1
 492:	30 40       	sbci	r19, 0x00	; 0
 494:	40 40       	sbci	r20, 0x00	; 0
 496:	50 40       	sbci	r21, 0x00	; 0
 498:	2e 21       	and	r18, r14
 49a:	3f 21       	and	r19, r15
 49c:	40 23       	and	r20, r16
 49e:	51 23       	and	r21, r17
 4a0:	21 15       	cp	r18, r1
 4a2:	31 05       	cpc	r19, r1
 4a4:	41 05       	cpc	r20, r1
 4a6:	51 05       	cpc	r21, r1
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <_fpadd_parts+0x10c>
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	79 01       	movw	r14, r18
 4b4:	8a 01       	movw	r16, r20
 4b6:	e6 28       	or	r14, r6
 4b8:	f7 28       	or	r15, r7
 4ba:	08 29       	or	r16, r8
 4bc:	19 29       	or	r17, r9
 4be:	3c c0       	rjmp	.+120    	; 0x538 <_fpadd_parts+0x192>
 4c0:	23 2b       	or	r18, r19
 4c2:	d1 f1       	breq	.+116    	; 0x538 <_fpadd_parts+0x192>
 4c4:	26 0e       	add	r2, r22
 4c6:	37 1e       	adc	r3, r23
 4c8:	35 01       	movw	r6, r10
 4ca:	46 01       	movw	r8, r12
 4cc:	06 2e       	mov	r0, r22
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <_fpadd_parts+0x132>
 4d0:	96 94       	lsr	r9
 4d2:	87 94       	ror	r8
 4d4:	77 94       	ror	r7
 4d6:	67 94       	ror	r6
 4d8:	0a 94       	dec	r0
 4da:	d2 f7       	brpl	.-12     	; 0x4d0 <_fpadd_parts+0x12a>
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <_fpadd_parts+0x148>
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	44 1f       	adc	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	d2 f7       	brpl	.-12     	; 0x4e6 <_fpadd_parts+0x140>
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	30 40       	sbci	r19, 0x00	; 0
 4f6:	40 40       	sbci	r20, 0x00	; 0
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	2a 21       	and	r18, r10
 4fc:	3b 21       	and	r19, r11
 4fe:	4c 21       	and	r20, r12
 500:	5d 21       	and	r21, r13
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	41 05       	cpc	r20, r1
 508:	51 05       	cpc	r21, r1
 50a:	21 f0       	breq	.+8      	; 0x514 <_fpadd_parts+0x16e>
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	59 01       	movw	r10, r18
 516:	6a 01       	movw	r12, r20
 518:	a6 28       	or	r10, r6
 51a:	b7 28       	or	r11, r7
 51c:	c8 28       	or	r12, r8
 51e:	d9 28       	or	r13, r9
 520:	0b c0       	rjmp	.+22     	; 0x538 <_fpadd_parts+0x192>
 522:	82 15       	cp	r24, r2
 524:	93 05       	cpc	r25, r3
 526:	2c f0       	brlt	.+10     	; 0x532 <_fpadd_parts+0x18c>
 528:	1c 01       	movw	r2, r24
 52a:	aa 24       	eor	r10, r10
 52c:	bb 24       	eor	r11, r11
 52e:	65 01       	movw	r12, r10
 530:	03 c0       	rjmp	.+6      	; 0x538 <_fpadd_parts+0x192>
 532:	ee 24       	eor	r14, r14
 534:	ff 24       	eor	r15, r15
 536:	87 01       	movw	r16, r14
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	9c 91       	ld	r25, X
 53c:	d2 01       	movw	r26, r4
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	8c 91       	ld	r24, X
 542:	98 17       	cp	r25, r24
 544:	09 f4       	brne	.+2      	; 0x548 <_fpadd_parts+0x1a2>
 546:	45 c0       	rjmp	.+138    	; 0x5d2 <_fpadd_parts+0x22c>
 548:	99 23       	and	r25, r25
 54a:	39 f0       	breq	.+14     	; 0x55a <_fpadd_parts+0x1b4>
 54c:	a8 01       	movw	r20, r16
 54e:	97 01       	movw	r18, r14
 550:	2a 19       	sub	r18, r10
 552:	3b 09       	sbc	r19, r11
 554:	4c 09       	sbc	r20, r12
 556:	5d 09       	sbc	r21, r13
 558:	06 c0       	rjmp	.+12     	; 0x566 <_fpadd_parts+0x1c0>
 55a:	a6 01       	movw	r20, r12
 55c:	95 01       	movw	r18, r10
 55e:	2e 19       	sub	r18, r14
 560:	3f 09       	sbc	r19, r15
 562:	40 0b       	sbc	r20, r16
 564:	51 0b       	sbc	r21, r17
 566:	57 fd       	sbrc	r21, 7
 568:	08 c0       	rjmp	.+16     	; 0x57a <_fpadd_parts+0x1d4>
 56a:	11 82       	std	Z+1, r1	; 0x01
 56c:	33 82       	std	Z+3, r3	; 0x03
 56e:	22 82       	std	Z+2, r2	; 0x02
 570:	24 83       	std	Z+4, r18	; 0x04
 572:	35 83       	std	Z+5, r19	; 0x05
 574:	46 83       	std	Z+6, r20	; 0x06
 576:	57 83       	std	Z+7, r21	; 0x07
 578:	1d c0       	rjmp	.+58     	; 0x5b4 <_fpadd_parts+0x20e>
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	81 83       	std	Z+1, r24	; 0x01
 57e:	33 82       	std	Z+3, r3	; 0x03
 580:	22 82       	std	Z+2, r2	; 0x02
 582:	88 27       	eor	r24, r24
 584:	99 27       	eor	r25, r25
 586:	dc 01       	movw	r26, r24
 588:	82 1b       	sub	r24, r18
 58a:	93 0b       	sbc	r25, r19
 58c:	a4 0b       	sbc	r26, r20
 58e:	b5 0b       	sbc	r27, r21
 590:	84 83       	std	Z+4, r24	; 0x04
 592:	95 83       	std	Z+5, r25	; 0x05
 594:	a6 83       	std	Z+6, r26	; 0x06
 596:	b7 83       	std	Z+7, r27	; 0x07
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <_fpadd_parts+0x20e>
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	44 1f       	adc	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	24 83       	std	Z+4, r18	; 0x04
 5a4:	35 83       	std	Z+5, r19	; 0x05
 5a6:	46 83       	std	Z+6, r20	; 0x06
 5a8:	57 83       	std	Z+7, r21	; 0x07
 5aa:	82 81       	ldd	r24, Z+2	; 0x02
 5ac:	93 81       	ldd	r25, Z+3	; 0x03
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	93 83       	std	Z+3, r25	; 0x03
 5b2:	82 83       	std	Z+2, r24	; 0x02
 5b4:	24 81       	ldd	r18, Z+4	; 0x04
 5b6:	35 81       	ldd	r19, Z+5	; 0x05
 5b8:	46 81       	ldd	r20, Z+6	; 0x06
 5ba:	57 81       	ldd	r21, Z+7	; 0x07
 5bc:	da 01       	movw	r26, r20
 5be:	c9 01       	movw	r24, r18
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	a1 09       	sbc	r26, r1
 5c4:	b1 09       	sbc	r27, r1
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	af 4f       	sbci	r26, 0xFF	; 255
 5cc:	bf 43       	sbci	r27, 0x3F	; 63
 5ce:	28 f3       	brcs	.-54     	; 0x59a <_fpadd_parts+0x1f4>
 5d0:	0b c0       	rjmp	.+22     	; 0x5e8 <_fpadd_parts+0x242>
 5d2:	91 83       	std	Z+1, r25	; 0x01
 5d4:	33 82       	std	Z+3, r3	; 0x03
 5d6:	22 82       	std	Z+2, r2	; 0x02
 5d8:	ea 0c       	add	r14, r10
 5da:	fb 1c       	adc	r15, r11
 5dc:	0c 1d       	adc	r16, r12
 5de:	1d 1d       	adc	r17, r13
 5e0:	e4 82       	std	Z+4, r14	; 0x04
 5e2:	f5 82       	std	Z+5, r15	; 0x05
 5e4:	06 83       	std	Z+6, r16	; 0x06
 5e6:	17 83       	std	Z+7, r17	; 0x07
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	80 83       	st	Z, r24
 5ec:	24 81       	ldd	r18, Z+4	; 0x04
 5ee:	35 81       	ldd	r19, Z+5	; 0x05
 5f0:	46 81       	ldd	r20, Z+6	; 0x06
 5f2:	57 81       	ldd	r21, Z+7	; 0x07
 5f4:	57 ff       	sbrs	r21, 7
 5f6:	1a c0       	rjmp	.+52     	; 0x62c <_fpadd_parts+0x286>
 5f8:	c9 01       	movw	r24, r18
 5fa:	aa 27       	eor	r26, r26
 5fc:	97 fd       	sbrc	r25, 7
 5fe:	a0 95       	com	r26
 600:	ba 2f       	mov	r27, r26
 602:	81 70       	andi	r24, 0x01	; 1
 604:	90 70       	andi	r25, 0x00	; 0
 606:	a0 70       	andi	r26, 0x00	; 0
 608:	b0 70       	andi	r27, 0x00	; 0
 60a:	56 95       	lsr	r21
 60c:	47 95       	ror	r20
 60e:	37 95       	ror	r19
 610:	27 95       	ror	r18
 612:	82 2b       	or	r24, r18
 614:	93 2b       	or	r25, r19
 616:	a4 2b       	or	r26, r20
 618:	b5 2b       	or	r27, r21
 61a:	84 83       	std	Z+4, r24	; 0x04
 61c:	95 83       	std	Z+5, r25	; 0x05
 61e:	a6 83       	std	Z+6, r26	; 0x06
 620:	b7 83       	std	Z+7, r27	; 0x07
 622:	82 81       	ldd	r24, Z+2	; 0x02
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	93 83       	std	Z+3, r25	; 0x03
 62a:	82 83       	std	Z+2, r24	; 0x02
 62c:	df 01       	movw	r26, r30
 62e:	01 c0       	rjmp	.+2      	; 0x632 <_fpadd_parts+0x28c>
 630:	d2 01       	movw	r26, r4
 632:	cd 01       	movw	r24, r26
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	e2 e1       	ldi	r30, 0x12	; 18
 63a:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__>

0000063e <__subsf3>:
 63e:	a0 e2       	ldi	r26, 0x20	; 32
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e5 e2       	ldi	r30, 0x25	; 37
 644:	f3 e0       	ldi	r31, 0x03	; 3
 646:	0c 94 75 07 	jmp	0xeea	; 0xeea <__prologue_saves__+0x18>
 64a:	69 83       	std	Y+1, r22	; 0x01
 64c:	7a 83       	std	Y+2, r23	; 0x02
 64e:	8b 83       	std	Y+3, r24	; 0x03
 650:	9c 83       	std	Y+4, r25	; 0x04
 652:	2d 83       	std	Y+5, r18	; 0x05
 654:	3e 83       	std	Y+6, r19	; 0x06
 656:	4f 83       	std	Y+7, r20	; 0x07
 658:	58 87       	std	Y+8, r21	; 0x08
 65a:	e9 e0       	ldi	r30, 0x09	; 9
 65c:	ee 2e       	mov	r14, r30
 65e:	f1 2c       	mov	r15, r1
 660:	ec 0e       	add	r14, r28
 662:	fd 1e       	adc	r15, r29
 664:	ce 01       	movw	r24, r28
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	b7 01       	movw	r22, r14
 66a:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 66e:	8e 01       	movw	r16, r28
 670:	0f 5e       	subi	r16, 0xEF	; 239
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	ce 01       	movw	r24, r28
 676:	05 96       	adiw	r24, 0x05	; 5
 678:	b8 01       	movw	r22, r16
 67a:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 67e:	8a 89       	ldd	r24, Y+18	; 0x12
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	89 27       	eor	r24, r25
 684:	8a 8b       	std	Y+18, r24	; 0x12
 686:	c7 01       	movw	r24, r14
 688:	b8 01       	movw	r22, r16
 68a:	ae 01       	movw	r20, r28
 68c:	47 5e       	subi	r20, 0xE7	; 231
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_fpadd_parts>
 694:	0e 94 c3 05 	call	0xb86	; 0xb86 <__pack_f>
 698:	a0 96       	adiw	r28, 0x20	; 32
 69a:	e6 e0       	ldi	r30, 0x06	; 6
 69c:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__epilogue_restores__+0x18>

000006a0 <__addsf3>:
 6a0:	a0 e2       	ldi	r26, 0x20	; 32
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e6 e5       	ldi	r30, 0x56	; 86
 6a6:	f3 e0       	ldi	r31, 0x03	; 3
 6a8:	0c 94 75 07 	jmp	0xeea	; 0xeea <__prologue_saves__+0x18>
 6ac:	69 83       	std	Y+1, r22	; 0x01
 6ae:	7a 83       	std	Y+2, r23	; 0x02
 6b0:	8b 83       	std	Y+3, r24	; 0x03
 6b2:	9c 83       	std	Y+4, r25	; 0x04
 6b4:	2d 83       	std	Y+5, r18	; 0x05
 6b6:	3e 83       	std	Y+6, r19	; 0x06
 6b8:	4f 83       	std	Y+7, r20	; 0x07
 6ba:	58 87       	std	Y+8, r21	; 0x08
 6bc:	f9 e0       	ldi	r31, 0x09	; 9
 6be:	ef 2e       	mov	r14, r31
 6c0:	f1 2c       	mov	r15, r1
 6c2:	ec 0e       	add	r14, r28
 6c4:	fd 1e       	adc	r15, r29
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	b7 01       	movw	r22, r14
 6cc:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 6d0:	8e 01       	movw	r16, r28
 6d2:	0f 5e       	subi	r16, 0xEF	; 239
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	ce 01       	movw	r24, r28
 6d8:	05 96       	adiw	r24, 0x05	; 5
 6da:	b8 01       	movw	r22, r16
 6dc:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 6e0:	c7 01       	movw	r24, r14
 6e2:	b8 01       	movw	r22, r16
 6e4:	ae 01       	movw	r20, r28
 6e6:	47 5e       	subi	r20, 0xE7	; 231
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_fpadd_parts>
 6ee:	0e 94 c3 05 	call	0xb86	; 0xb86 <__pack_f>
 6f2:	a0 96       	adiw	r28, 0x20	; 32
 6f4:	e6 e0       	ldi	r30, 0x06	; 6
 6f6:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__epilogue_restores__+0x18>

000006fa <__mulsf3>:
 6fa:	a0 e2       	ldi	r26, 0x20	; 32
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e3 e8       	ldi	r30, 0x83	; 131
 700:	f3 e0       	ldi	r31, 0x03	; 3
 702:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__prologue_saves__>
 706:	69 83       	std	Y+1, r22	; 0x01
 708:	7a 83       	std	Y+2, r23	; 0x02
 70a:	8b 83       	std	Y+3, r24	; 0x03
 70c:	9c 83       	std	Y+4, r25	; 0x04
 70e:	2d 83       	std	Y+5, r18	; 0x05
 710:	3e 83       	std	Y+6, r19	; 0x06
 712:	4f 83       	std	Y+7, r20	; 0x07
 714:	58 87       	std	Y+8, r21	; 0x08
 716:	ce 01       	movw	r24, r28
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	be 01       	movw	r22, r28
 71c:	67 5f       	subi	r22, 0xF7	; 247
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 724:	ce 01       	movw	r24, r28
 726:	05 96       	adiw	r24, 0x05	; 5
 728:	be 01       	movw	r22, r28
 72a:	6f 5e       	subi	r22, 0xEF	; 239
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 732:	99 85       	ldd	r25, Y+9	; 0x09
 734:	92 30       	cpi	r25, 0x02	; 2
 736:	88 f0       	brcs	.+34     	; 0x75a <__mulsf3+0x60>
 738:	89 89       	ldd	r24, Y+17	; 0x11
 73a:	82 30       	cpi	r24, 0x02	; 2
 73c:	c8 f0       	brcs	.+50     	; 0x770 <__mulsf3+0x76>
 73e:	94 30       	cpi	r25, 0x04	; 4
 740:	19 f4       	brne	.+6      	; 0x748 <__mulsf3+0x4e>
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	51 f4       	brne	.+20     	; 0x75a <__mulsf3+0x60>
 746:	04 c0       	rjmp	.+8      	; 0x750 <__mulsf3+0x56>
 748:	84 30       	cpi	r24, 0x04	; 4
 74a:	29 f4       	brne	.+10     	; 0x756 <__mulsf3+0x5c>
 74c:	92 30       	cpi	r25, 0x02	; 2
 74e:	81 f4       	brne	.+32     	; 0x770 <__mulsf3+0x76>
 750:	80 e6       	ldi	r24, 0x60	; 96
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	c6 c0       	rjmp	.+396    	; 0x8e2 <__stack+0x83>
 756:	92 30       	cpi	r25, 0x02	; 2
 758:	49 f4       	brne	.+18     	; 0x76c <__mulsf3+0x72>
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	9a 85       	ldd	r25, Y+10	; 0x0a
 75e:	8a 89       	ldd	r24, Y+18	; 0x12
 760:	98 13       	cpse	r25, r24
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	2a 87       	std	Y+10, r18	; 0x0a
 766:	ce 01       	movw	r24, r28
 768:	09 96       	adiw	r24, 0x09	; 9
 76a:	bb c0       	rjmp	.+374    	; 0x8e2 <__stack+0x83>
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	49 f4       	brne	.+18     	; 0x782 <__mulsf3+0x88>
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	9a 85       	ldd	r25, Y+10	; 0x0a
 774:	8a 89       	ldd	r24, Y+18	; 0x12
 776:	98 13       	cpse	r25, r24
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	2a 8b       	std	Y+18, r18	; 0x12
 77c:	ce 01       	movw	r24, r28
 77e:	41 96       	adiw	r24, 0x11	; 17
 780:	b0 c0       	rjmp	.+352    	; 0x8e2 <__stack+0x83>
 782:	2d 84       	ldd	r2, Y+13	; 0x0d
 784:	3e 84       	ldd	r3, Y+14	; 0x0e
 786:	4f 84       	ldd	r4, Y+15	; 0x0f
 788:	58 88       	ldd	r5, Y+16	; 0x10
 78a:	6d 88       	ldd	r6, Y+21	; 0x15
 78c:	7e 88       	ldd	r7, Y+22	; 0x16
 78e:	8f 88       	ldd	r8, Y+23	; 0x17
 790:	98 8c       	ldd	r9, Y+24	; 0x18
 792:	ee 24       	eor	r14, r14
 794:	ff 24       	eor	r15, r15
 796:	87 01       	movw	r16, r14
 798:	aa 24       	eor	r10, r10
 79a:	bb 24       	eor	r11, r11
 79c:	65 01       	movw	r12, r10
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	e0 e0       	ldi	r30, 0x00	; 0
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	c1 01       	movw	r24, r2
 7ac:	81 70       	andi	r24, 0x01	; 1
 7ae:	90 70       	andi	r25, 0x00	; 0
 7b0:	89 2b       	or	r24, r25
 7b2:	e9 f0       	breq	.+58     	; 0x7ee <__mulsf3+0xf4>
 7b4:	e6 0c       	add	r14, r6
 7b6:	f7 1c       	adc	r15, r7
 7b8:	08 1d       	adc	r16, r8
 7ba:	19 1d       	adc	r17, r9
 7bc:	9a 01       	movw	r18, r20
 7be:	ab 01       	movw	r20, r22
 7c0:	2a 0d       	add	r18, r10
 7c2:	3b 1d       	adc	r19, r11
 7c4:	4c 1d       	adc	r20, r12
 7c6:	5d 1d       	adc	r21, r13
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	a0 e0       	ldi	r26, 0x00	; 0
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	e6 14       	cp	r14, r6
 7d2:	f7 04       	cpc	r15, r7
 7d4:	08 05       	cpc	r16, r8
 7d6:	19 05       	cpc	r17, r9
 7d8:	20 f4       	brcc	.+8      	; 0x7e2 <__mulsf3+0xe8>
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	a0 e0       	ldi	r26, 0x00	; 0
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	ba 01       	movw	r22, r20
 7e4:	a9 01       	movw	r20, r18
 7e6:	48 0f       	add	r20, r24
 7e8:	59 1f       	adc	r21, r25
 7ea:	6a 1f       	adc	r22, r26
 7ec:	7b 1f       	adc	r23, r27
 7ee:	aa 0c       	add	r10, r10
 7f0:	bb 1c       	adc	r11, r11
 7f2:	cc 1c       	adc	r12, r12
 7f4:	dd 1c       	adc	r13, r13
 7f6:	97 fe       	sbrs	r9, 7
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <__mulsf3+0x110>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	a0 e0       	ldi	r26, 0x00	; 0
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	a8 2a       	or	r10, r24
 804:	b9 2a       	or	r11, r25
 806:	ca 2a       	or	r12, r26
 808:	db 2a       	or	r13, r27
 80a:	31 96       	adiw	r30, 0x01	; 1
 80c:	e0 32       	cpi	r30, 0x20	; 32
 80e:	f1 05       	cpc	r31, r1
 810:	49 f0       	breq	.+18     	; 0x824 <__mulsf3+0x12a>
 812:	66 0c       	add	r6, r6
 814:	77 1c       	adc	r7, r7
 816:	88 1c       	adc	r8, r8
 818:	99 1c       	adc	r9, r9
 81a:	56 94       	lsr	r5
 81c:	47 94       	ror	r4
 81e:	37 94       	ror	r3
 820:	27 94       	ror	r2
 822:	c3 cf       	rjmp	.-122    	; 0x7aa <__mulsf3+0xb0>
 824:	fa 85       	ldd	r31, Y+10	; 0x0a
 826:	ea 89       	ldd	r30, Y+18	; 0x12
 828:	2b 89       	ldd	r18, Y+19	; 0x13
 82a:	3c 89       	ldd	r19, Y+20	; 0x14
 82c:	8b 85       	ldd	r24, Y+11	; 0x0b
 82e:	9c 85       	ldd	r25, Y+12	; 0x0c
 830:	28 0f       	add	r18, r24
 832:	39 1f       	adc	r19, r25
 834:	2e 5f       	subi	r18, 0xFE	; 254
 836:	3f 4f       	sbci	r19, 0xFF	; 255
 838:	17 c0       	rjmp	.+46     	; 0x868 <__stack+0x9>
 83a:	ca 01       	movw	r24, r20
 83c:	81 70       	andi	r24, 0x01	; 1
 83e:	90 70       	andi	r25, 0x00	; 0
 840:	89 2b       	or	r24, r25
 842:	61 f0       	breq	.+24     	; 0x85c <__mulsf3+0x162>
 844:	16 95       	lsr	r17
 846:	07 95       	ror	r16
 848:	f7 94       	ror	r15
 84a:	e7 94       	ror	r14
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	a0 e0       	ldi	r26, 0x00	; 0
 852:	b0 e8       	ldi	r27, 0x80	; 128
 854:	e8 2a       	or	r14, r24
 856:	f9 2a       	or	r15, r25
 858:	0a 2b       	or	r16, r26
 85a:	1b 2b       	or	r17, r27
 85c:	76 95       	lsr	r23
 85e:	67 95       	ror	r22
 860:	57 95       	ror	r21
 862:	47 95       	ror	r20
 864:	2f 5f       	subi	r18, 0xFF	; 255
 866:	3f 4f       	sbci	r19, 0xFF	; 255
 868:	77 fd       	sbrc	r23, 7
 86a:	e7 cf       	rjmp	.-50     	; 0x83a <__mulsf3+0x140>
 86c:	0c c0       	rjmp	.+24     	; 0x886 <__stack+0x27>
 86e:	44 0f       	add	r20, r20
 870:	55 1f       	adc	r21, r21
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	17 fd       	sbrc	r17, 7
 878:	41 60       	ori	r20, 0x01	; 1
 87a:	ee 0c       	add	r14, r14
 87c:	ff 1c       	adc	r15, r15
 87e:	00 1f       	adc	r16, r16
 880:	11 1f       	adc	r17, r17
 882:	21 50       	subi	r18, 0x01	; 1
 884:	30 40       	sbci	r19, 0x00	; 0
 886:	40 30       	cpi	r20, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	59 07       	cpc	r21, r25
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	69 07       	cpc	r22, r25
 890:	90 e4       	ldi	r25, 0x40	; 64
 892:	79 07       	cpc	r23, r25
 894:	60 f3       	brcs	.-40     	; 0x86e <__stack+0xf>
 896:	2b 8f       	std	Y+27, r18	; 0x1b
 898:	3c 8f       	std	Y+28, r19	; 0x1c
 89a:	db 01       	movw	r26, r22
 89c:	ca 01       	movw	r24, r20
 89e:	8f 77       	andi	r24, 0x7F	; 127
 8a0:	90 70       	andi	r25, 0x00	; 0
 8a2:	a0 70       	andi	r26, 0x00	; 0
 8a4:	b0 70       	andi	r27, 0x00	; 0
 8a6:	80 34       	cpi	r24, 0x40	; 64
 8a8:	91 05       	cpc	r25, r1
 8aa:	a1 05       	cpc	r26, r1
 8ac:	b1 05       	cpc	r27, r1
 8ae:	61 f4       	brne	.+24     	; 0x8c8 <__stack+0x69>
 8b0:	47 fd       	sbrc	r20, 7
 8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <__stack+0x69>
 8b4:	e1 14       	cp	r14, r1
 8b6:	f1 04       	cpc	r15, r1
 8b8:	01 05       	cpc	r16, r1
 8ba:	11 05       	cpc	r17, r1
 8bc:	29 f0       	breq	.+10     	; 0x8c8 <__stack+0x69>
 8be:	40 5c       	subi	r20, 0xC0	; 192
 8c0:	5f 4f       	sbci	r21, 0xFF	; 255
 8c2:	6f 4f       	sbci	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	40 78       	andi	r20, 0x80	; 128
 8c8:	1a 8e       	std	Y+26, r1	; 0x1a
 8ca:	fe 17       	cp	r31, r30
 8cc:	11 f0       	breq	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	8a 8f       	std	Y+26, r24	; 0x1a
 8d2:	4d 8f       	std	Y+29, r20	; 0x1d
 8d4:	5e 8f       	std	Y+30, r21	; 0x1e
 8d6:	6f 8f       	std	Y+31, r22	; 0x1f
 8d8:	78 a3       	std	Y+32, r23	; 0x20
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	89 8f       	std	Y+25, r24	; 0x19
 8de:	ce 01       	movw	r24, r28
 8e0:	49 96       	adiw	r24, 0x19	; 25
 8e2:	0e 94 c3 05 	call	0xb86	; 0xb86 <__pack_f>
 8e6:	a0 96       	adiw	r28, 0x20	; 32
 8e8:	e2 e1       	ldi	r30, 0x12	; 18
 8ea:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__>

000008ee <__gesf2>:
 8ee:	a8 e1       	ldi	r26, 0x18	; 24
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	ed e7       	ldi	r30, 0x7D	; 125
 8f4:	f4 e0       	ldi	r31, 0x04	; 4
 8f6:	0c 94 75 07 	jmp	0xeea	; 0xeea <__prologue_saves__+0x18>
 8fa:	69 83       	std	Y+1, r22	; 0x01
 8fc:	7a 83       	std	Y+2, r23	; 0x02
 8fe:	8b 83       	std	Y+3, r24	; 0x03
 900:	9c 83       	std	Y+4, r25	; 0x04
 902:	2d 83       	std	Y+5, r18	; 0x05
 904:	3e 83       	std	Y+6, r19	; 0x06
 906:	4f 83       	std	Y+7, r20	; 0x07
 908:	58 87       	std	Y+8, r21	; 0x08
 90a:	89 e0       	ldi	r24, 0x09	; 9
 90c:	e8 2e       	mov	r14, r24
 90e:	f1 2c       	mov	r15, r1
 910:	ec 0e       	add	r14, r28
 912:	fd 1e       	adc	r15, r29
 914:	ce 01       	movw	r24, r28
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	b7 01       	movw	r22, r14
 91a:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 91e:	8e 01       	movw	r16, r28
 920:	0f 5e       	subi	r16, 0xEF	; 239
 922:	1f 4f       	sbci	r17, 0xFF	; 255
 924:	ce 01       	movw	r24, r28
 926:	05 96       	adiw	r24, 0x05	; 5
 928:	b8 01       	movw	r22, r16
 92a:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 92e:	89 85       	ldd	r24, Y+9	; 0x09
 930:	82 30       	cpi	r24, 0x02	; 2
 932:	40 f0       	brcs	.+16     	; 0x944 <__gesf2+0x56>
 934:	89 89       	ldd	r24, Y+17	; 0x11
 936:	82 30       	cpi	r24, 0x02	; 2
 938:	28 f0       	brcs	.+10     	; 0x944 <__gesf2+0x56>
 93a:	c7 01       	movw	r24, r14
 93c:	b8 01       	movw	r22, r16
 93e:	0e 94 10 07 	call	0xe20	; 0xe20 <__fpcmp_parts_f>
 942:	01 c0       	rjmp	.+2      	; 0x946 <__gesf2+0x58>
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	68 96       	adiw	r28, 0x18	; 24
 948:	e6 e0       	ldi	r30, 0x06	; 6
 94a:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__epilogue_restores__+0x18>

0000094e <__fixsfsi>:
 94e:	ac e0       	ldi	r26, 0x0C	; 12
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	ed ea       	ldi	r30, 0xAD	; 173
 954:	f4 e0       	ldi	r31, 0x04	; 4
 956:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__prologue_saves__+0x20>
 95a:	69 83       	std	Y+1, r22	; 0x01
 95c:	7a 83       	std	Y+2, r23	; 0x02
 95e:	8b 83       	std	Y+3, r24	; 0x03
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	be 01       	movw	r22, r28
 968:	6b 5f       	subi	r22, 0xFB	; 251
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	0e 94 98 06 	call	0xd30	; 0xd30 <__unpack_f>
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	61 f1       	breq	.+88     	; 0x9ce <__fixsfsi+0x80>
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	50 f1       	brcs	.+84     	; 0x9ce <__fixsfsi+0x80>
 97a:	84 30       	cpi	r24, 0x04	; 4
 97c:	21 f4       	brne	.+8      	; 0x986 <__fixsfsi+0x38>
 97e:	8e 81       	ldd	r24, Y+6	; 0x06
 980:	88 23       	and	r24, r24
 982:	51 f1       	breq	.+84     	; 0x9d8 <__fixsfsi+0x8a>
 984:	2e c0       	rjmp	.+92     	; 0x9e2 <__fixsfsi+0x94>
 986:	2f 81       	ldd	r18, Y+7	; 0x07
 988:	38 85       	ldd	r19, Y+8	; 0x08
 98a:	37 fd       	sbrc	r19, 7
 98c:	20 c0       	rjmp	.+64     	; 0x9ce <__fixsfsi+0x80>
 98e:	6e 81       	ldd	r22, Y+6	; 0x06
 990:	2f 31       	cpi	r18, 0x1F	; 31
 992:	31 05       	cpc	r19, r1
 994:	1c f0       	brlt	.+6      	; 0x99c <__fixsfsi+0x4e>
 996:	66 23       	and	r22, r22
 998:	f9 f0       	breq	.+62     	; 0x9d8 <__fixsfsi+0x8a>
 99a:	23 c0       	rjmp	.+70     	; 0x9e2 <__fixsfsi+0x94>
 99c:	8e e1       	ldi	r24, 0x1E	; 30
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	82 1b       	sub	r24, r18
 9a2:	93 0b       	sbc	r25, r19
 9a4:	29 85       	ldd	r18, Y+9	; 0x09
 9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
 9a8:	4b 85       	ldd	r20, Y+11	; 0x0b
 9aa:	5c 85       	ldd	r21, Y+12	; 0x0c
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__fixsfsi+0x68>
 9ae:	56 95       	lsr	r21
 9b0:	47 95       	ror	r20
 9b2:	37 95       	ror	r19
 9b4:	27 95       	ror	r18
 9b6:	8a 95       	dec	r24
 9b8:	d2 f7       	brpl	.-12     	; 0x9ae <__fixsfsi+0x60>
 9ba:	66 23       	and	r22, r22
 9bc:	b1 f0       	breq	.+44     	; 0x9ea <__fixsfsi+0x9c>
 9be:	50 95       	com	r21
 9c0:	40 95       	com	r20
 9c2:	30 95       	com	r19
 9c4:	21 95       	neg	r18
 9c6:	3f 4f       	sbci	r19, 0xFF	; 255
 9c8:	4f 4f       	sbci	r20, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	0e c0       	rjmp	.+28     	; 0x9ea <__fixsfsi+0x9c>
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	40 e0       	ldi	r20, 0x00	; 0
 9d4:	50 e0       	ldi	r21, 0x00	; 0
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__fixsfsi+0x9c>
 9d8:	2f ef       	ldi	r18, 0xFF	; 255
 9da:	3f ef       	ldi	r19, 0xFF	; 255
 9dc:	4f ef       	ldi	r20, 0xFF	; 255
 9de:	5f e7       	ldi	r21, 0x7F	; 127
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__fixsfsi+0x9c>
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	50 e8       	ldi	r21, 0x80	; 128
 9ea:	b9 01       	movw	r22, r18
 9ec:	ca 01       	movw	r24, r20
 9ee:	2c 96       	adiw	r28, 0x0c	; 12
 9f0:	e2 e0       	ldi	r30, 0x02	; 2
 9f2:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__epilogue_restores__+0x20>

000009f6 <__floatunsisf>:
 9f6:	a8 e0       	ldi	r26, 0x08	; 8
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	e1 e0       	ldi	r30, 0x01	; 1
 9fc:	f5 e0       	ldi	r31, 0x05	; 5
 9fe:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__prologue_saves__+0x10>
 a02:	7b 01       	movw	r14, r22
 a04:	8c 01       	movw	r16, r24
 a06:	61 15       	cp	r22, r1
 a08:	71 05       	cpc	r23, r1
 a0a:	81 05       	cpc	r24, r1
 a0c:	91 05       	cpc	r25, r1
 a0e:	19 f4       	brne	.+6      	; 0xa16 <__floatunsisf+0x20>
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	89 83       	std	Y+1, r24	; 0x01
 a14:	60 c0       	rjmp	.+192    	; 0xad6 <__floatunsisf+0xe0>
 a16:	83 e0       	ldi	r24, 0x03	; 3
 a18:	89 83       	std	Y+1, r24	; 0x01
 a1a:	8e e1       	ldi	r24, 0x1E	; 30
 a1c:	c8 2e       	mov	r12, r24
 a1e:	d1 2c       	mov	r13, r1
 a20:	dc 82       	std	Y+4, r13	; 0x04
 a22:	cb 82       	std	Y+3, r12	; 0x03
 a24:	ed 82       	std	Y+5, r14	; 0x05
 a26:	fe 82       	std	Y+6, r15	; 0x06
 a28:	0f 83       	std	Y+7, r16	; 0x07
 a2a:	18 87       	std	Y+8, r17	; 0x08
 a2c:	c8 01       	movw	r24, r16
 a2e:	b7 01       	movw	r22, r14
 a30:	0e 94 74 05 	call	0xae8	; 0xae8 <__clzsi2>
 a34:	fc 01       	movw	r30, r24
 a36:	31 97       	sbiw	r30, 0x01	; 1
 a38:	f7 ff       	sbrs	r31, 7
 a3a:	3b c0       	rjmp	.+118    	; 0xab2 <__floatunsisf+0xbc>
 a3c:	22 27       	eor	r18, r18
 a3e:	33 27       	eor	r19, r19
 a40:	2e 1b       	sub	r18, r30
 a42:	3f 0b       	sbc	r19, r31
 a44:	57 01       	movw	r10, r14
 a46:	68 01       	movw	r12, r16
 a48:	02 2e       	mov	r0, r18
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <__floatunsisf+0x5e>
 a4c:	d6 94       	lsr	r13
 a4e:	c7 94       	ror	r12
 a50:	b7 94       	ror	r11
 a52:	a7 94       	ror	r10
 a54:	0a 94       	dec	r0
 a56:	d2 f7       	brpl	.-12     	; 0xa4c <__floatunsisf+0x56>
 a58:	40 e0       	ldi	r20, 0x00	; 0
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	a0 e0       	ldi	r26, 0x00	; 0
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__floatunsisf+0x7c>
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	2a 95       	dec	r18
 a74:	d2 f7       	brpl	.-12     	; 0xa6a <__floatunsisf+0x74>
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	a1 09       	sbc	r26, r1
 a7a:	b1 09       	sbc	r27, r1
 a7c:	8e 21       	and	r24, r14
 a7e:	9f 21       	and	r25, r15
 a80:	a0 23       	and	r26, r16
 a82:	b1 23       	and	r27, r17
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	a1 05       	cpc	r26, r1
 a88:	b1 05       	cpc	r27, r1
 a8a:	21 f0       	breq	.+8      	; 0xa94 <__floatunsisf+0x9e>
 a8c:	41 e0       	ldi	r20, 0x01	; 1
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	4a 29       	or	r20, r10
 a96:	5b 29       	or	r21, r11
 a98:	6c 29       	or	r22, r12
 a9a:	7d 29       	or	r23, r13
 a9c:	4d 83       	std	Y+5, r20	; 0x05
 a9e:	5e 83       	std	Y+6, r21	; 0x06
 aa0:	6f 83       	std	Y+7, r22	; 0x07
 aa2:	78 87       	std	Y+8, r23	; 0x08
 aa4:	8e e1       	ldi	r24, 0x1E	; 30
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	8e 1b       	sub	r24, r30
 aaa:	9f 0b       	sbc	r25, r31
 aac:	9c 83       	std	Y+4, r25	; 0x04
 aae:	8b 83       	std	Y+3, r24	; 0x03
 ab0:	12 c0       	rjmp	.+36     	; 0xad6 <__floatunsisf+0xe0>
 ab2:	30 97       	sbiw	r30, 0x00	; 0
 ab4:	81 f0       	breq	.+32     	; 0xad6 <__floatunsisf+0xe0>
 ab6:	0e 2e       	mov	r0, r30
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__floatunsisf+0xcc>
 aba:	ee 0c       	add	r14, r14
 abc:	ff 1c       	adc	r15, r15
 abe:	00 1f       	adc	r16, r16
 ac0:	11 1f       	adc	r17, r17
 ac2:	0a 94       	dec	r0
 ac4:	d2 f7       	brpl	.-12     	; 0xaba <__floatunsisf+0xc4>
 ac6:	ed 82       	std	Y+5, r14	; 0x05
 ac8:	fe 82       	std	Y+6, r15	; 0x06
 aca:	0f 83       	std	Y+7, r16	; 0x07
 acc:	18 87       	std	Y+8, r17	; 0x08
 ace:	ce 1a       	sub	r12, r30
 ad0:	df 0a       	sbc	r13, r31
 ad2:	dc 82       	std	Y+4, r13	; 0x04
 ad4:	cb 82       	std	Y+3, r12	; 0x03
 ad6:	1a 82       	std	Y+2, r1	; 0x02
 ad8:	ce 01       	movw	r24, r28
 ada:	01 96       	adiw	r24, 0x01	; 1
 adc:	0e 94 c3 05 	call	0xb86	; 0xb86 <__pack_f>
 ae0:	28 96       	adiw	r28, 0x08	; 8
 ae2:	ea e0       	ldi	r30, 0x0A	; 10
 ae4:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__epilogue_restores__+0x10>

00000ae8 <__clzsi2>:
 ae8:	ef 92       	push	r14
 aea:	ff 92       	push	r15
 aec:	0f 93       	push	r16
 aee:	1f 93       	push	r17
 af0:	7b 01       	movw	r14, r22
 af2:	8c 01       	movw	r16, r24
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	e8 16       	cp	r14, r24
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	f8 06       	cpc	r15, r24
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	08 07       	cpc	r16, r24
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	18 07       	cpc	r17, r24
 b04:	88 f4       	brcc	.+34     	; 0xb28 <__clzsi2+0x40>
 b06:	8f ef       	ldi	r24, 0xFF	; 255
 b08:	e8 16       	cp	r14, r24
 b0a:	f1 04       	cpc	r15, r1
 b0c:	01 05       	cpc	r16, r1
 b0e:	11 05       	cpc	r17, r1
 b10:	31 f0       	breq	.+12     	; 0xb1e <__clzsi2+0x36>
 b12:	28 f0       	brcs	.+10     	; 0xb1e <__clzsi2+0x36>
 b14:	88 e0       	ldi	r24, 0x08	; 8
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	a0 e0       	ldi	r26, 0x00	; 0
 b1a:	b0 e0       	ldi	r27, 0x00	; 0
 b1c:	17 c0       	rjmp	.+46     	; 0xb4c <__clzsi2+0x64>
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	a0 e0       	ldi	r26, 0x00	; 0
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	12 c0       	rjmp	.+36     	; 0xb4c <__clzsi2+0x64>
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	e8 16       	cp	r14, r24
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	f8 06       	cpc	r15, r24
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	08 07       	cpc	r16, r24
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	18 07       	cpc	r17, r24
 b38:	28 f0       	brcs	.+10     	; 0xb44 <__clzsi2+0x5c>
 b3a:	88 e1       	ldi	r24, 0x18	; 24
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	a0 e0       	ldi	r26, 0x00	; 0
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	04 c0       	rjmp	.+8      	; 0xb4c <__clzsi2+0x64>
 b44:	80 e1       	ldi	r24, 0x10	; 16
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	a0 e0       	ldi	r26, 0x00	; 0
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	20 e2       	ldi	r18, 0x20	; 32
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	40 e0       	ldi	r20, 0x00	; 0
 b52:	50 e0       	ldi	r21, 0x00	; 0
 b54:	28 1b       	sub	r18, r24
 b56:	39 0b       	sbc	r19, r25
 b58:	4a 0b       	sbc	r20, r26
 b5a:	5b 0b       	sbc	r21, r27
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__clzsi2+0x7e>
 b5e:	16 95       	lsr	r17
 b60:	07 95       	ror	r16
 b62:	f7 94       	ror	r15
 b64:	e7 94       	ror	r14
 b66:	8a 95       	dec	r24
 b68:	d2 f7       	brpl	.-12     	; 0xb5e <__clzsi2+0x76>
 b6a:	f7 01       	movw	r30, r14
 b6c:	e8 59       	subi	r30, 0x98	; 152
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	80 81       	ld	r24, Z
 b72:	28 1b       	sub	r18, r24
 b74:	31 09       	sbc	r19, r1
 b76:	41 09       	sbc	r20, r1
 b78:	51 09       	sbc	r21, r1
 b7a:	c9 01       	movw	r24, r18
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	ff 90       	pop	r15
 b82:	ef 90       	pop	r14
 b84:	08 95       	ret

00000b86 <__pack_f>:
 b86:	df 92       	push	r13
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	fc 01       	movw	r30, r24
 b92:	e4 80       	ldd	r14, Z+4	; 0x04
 b94:	f5 80       	ldd	r15, Z+5	; 0x05
 b96:	06 81       	ldd	r16, Z+6	; 0x06
 b98:	17 81       	ldd	r17, Z+7	; 0x07
 b9a:	d1 80       	ldd	r13, Z+1	; 0x01
 b9c:	80 81       	ld	r24, Z
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	48 f4       	brcc	.+18     	; 0xbb4 <__pack_f+0x2e>
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	a0 e1       	ldi	r26, 0x10	; 16
 ba8:	b0 e0       	ldi	r27, 0x00	; 0
 baa:	e8 2a       	or	r14, r24
 bac:	f9 2a       	or	r15, r25
 bae:	0a 2b       	or	r16, r26
 bb0:	1b 2b       	or	r17, r27
 bb2:	a5 c0       	rjmp	.+330    	; 0xcfe <__pack_f+0x178>
 bb4:	84 30       	cpi	r24, 0x04	; 4
 bb6:	09 f4       	brne	.+2      	; 0xbba <__pack_f+0x34>
 bb8:	9f c0       	rjmp	.+318    	; 0xcf8 <__pack_f+0x172>
 bba:	82 30       	cpi	r24, 0x02	; 2
 bbc:	21 f4       	brne	.+8      	; 0xbc6 <__pack_f+0x40>
 bbe:	ee 24       	eor	r14, r14
 bc0:	ff 24       	eor	r15, r15
 bc2:	87 01       	movw	r16, r14
 bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <__pack_f+0x4a>
 bc6:	e1 14       	cp	r14, r1
 bc8:	f1 04       	cpc	r15, r1
 bca:	01 05       	cpc	r16, r1
 bcc:	11 05       	cpc	r17, r1
 bce:	19 f4       	brne	.+6      	; 0xbd6 <__pack_f+0x50>
 bd0:	e0 e0       	ldi	r30, 0x00	; 0
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	96 c0       	rjmp	.+300    	; 0xd02 <__pack_f+0x17c>
 bd6:	62 81       	ldd	r22, Z+2	; 0x02
 bd8:	73 81       	ldd	r23, Z+3	; 0x03
 bda:	9f ef       	ldi	r25, 0xFF	; 255
 bdc:	62 38       	cpi	r22, 0x82	; 130
 bde:	79 07       	cpc	r23, r25
 be0:	0c f0       	brlt	.+2      	; 0xbe4 <__pack_f+0x5e>
 be2:	5b c0       	rjmp	.+182    	; 0xc9a <__pack_f+0x114>
 be4:	22 e8       	ldi	r18, 0x82	; 130
 be6:	3f ef       	ldi	r19, 0xFF	; 255
 be8:	26 1b       	sub	r18, r22
 bea:	37 0b       	sbc	r19, r23
 bec:	2a 31       	cpi	r18, 0x1A	; 26
 bee:	31 05       	cpc	r19, r1
 bf0:	2c f0       	brlt	.+10     	; 0xbfc <__pack_f+0x76>
 bf2:	20 e0       	ldi	r18, 0x00	; 0
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	40 e0       	ldi	r20, 0x00	; 0
 bf8:	50 e0       	ldi	r21, 0x00	; 0
 bfa:	2a c0       	rjmp	.+84     	; 0xc50 <__pack_f+0xca>
 bfc:	b8 01       	movw	r22, r16
 bfe:	a7 01       	movw	r20, r14
 c00:	02 2e       	mov	r0, r18
 c02:	04 c0       	rjmp	.+8      	; 0xc0c <__pack_f+0x86>
 c04:	76 95       	lsr	r23
 c06:	67 95       	ror	r22
 c08:	57 95       	ror	r21
 c0a:	47 95       	ror	r20
 c0c:	0a 94       	dec	r0
 c0e:	d2 f7       	brpl	.-12     	; 0xc04 <__pack_f+0x7e>
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	a0 e0       	ldi	r26, 0x00	; 0
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	04 c0       	rjmp	.+8      	; 0xc22 <__pack_f+0x9c>
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	aa 1f       	adc	r26, r26
 c20:	bb 1f       	adc	r27, r27
 c22:	2a 95       	dec	r18
 c24:	d2 f7       	brpl	.-12     	; 0xc1a <__pack_f+0x94>
 c26:	01 97       	sbiw	r24, 0x01	; 1
 c28:	a1 09       	sbc	r26, r1
 c2a:	b1 09       	sbc	r27, r1
 c2c:	8e 21       	and	r24, r14
 c2e:	9f 21       	and	r25, r15
 c30:	a0 23       	and	r26, r16
 c32:	b1 23       	and	r27, r17
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	a1 05       	cpc	r26, r1
 c38:	b1 05       	cpc	r27, r1
 c3a:	21 f0       	breq	.+8      	; 0xc44 <__pack_f+0xbe>
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	a0 e0       	ldi	r26, 0x00	; 0
 c42:	b0 e0       	ldi	r27, 0x00	; 0
 c44:	9a 01       	movw	r18, r20
 c46:	ab 01       	movw	r20, r22
 c48:	28 2b       	or	r18, r24
 c4a:	39 2b       	or	r19, r25
 c4c:	4a 2b       	or	r20, r26
 c4e:	5b 2b       	or	r21, r27
 c50:	da 01       	movw	r26, r20
 c52:	c9 01       	movw	r24, r18
 c54:	8f 77       	andi	r24, 0x7F	; 127
 c56:	90 70       	andi	r25, 0x00	; 0
 c58:	a0 70       	andi	r26, 0x00	; 0
 c5a:	b0 70       	andi	r27, 0x00	; 0
 c5c:	80 34       	cpi	r24, 0x40	; 64
 c5e:	91 05       	cpc	r25, r1
 c60:	a1 05       	cpc	r26, r1
 c62:	b1 05       	cpc	r27, r1
 c64:	39 f4       	brne	.+14     	; 0xc74 <__pack_f+0xee>
 c66:	27 ff       	sbrs	r18, 7
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <__pack_f+0xf6>
 c6a:	20 5c       	subi	r18, 0xC0	; 192
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	4f 4f       	sbci	r20, 0xFF	; 255
 c70:	5f 4f       	sbci	r21, 0xFF	; 255
 c72:	04 c0       	rjmp	.+8      	; 0xc7c <__pack_f+0xf6>
 c74:	21 5c       	subi	r18, 0xC1	; 193
 c76:	3f 4f       	sbci	r19, 0xFF	; 255
 c78:	4f 4f       	sbci	r20, 0xFF	; 255
 c7a:	5f 4f       	sbci	r21, 0xFF	; 255
 c7c:	e0 e0       	ldi	r30, 0x00	; 0
 c7e:	f0 e0       	ldi	r31, 0x00	; 0
 c80:	20 30       	cpi	r18, 0x00	; 0
 c82:	a0 e0       	ldi	r26, 0x00	; 0
 c84:	3a 07       	cpc	r19, r26
 c86:	a0 e0       	ldi	r26, 0x00	; 0
 c88:	4a 07       	cpc	r20, r26
 c8a:	a0 e4       	ldi	r26, 0x40	; 64
 c8c:	5a 07       	cpc	r21, r26
 c8e:	10 f0       	brcs	.+4      	; 0xc94 <__pack_f+0x10e>
 c90:	e1 e0       	ldi	r30, 0x01	; 1
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	79 01       	movw	r14, r18
 c96:	8a 01       	movw	r16, r20
 c98:	27 c0       	rjmp	.+78     	; 0xce8 <__pack_f+0x162>
 c9a:	60 38       	cpi	r22, 0x80	; 128
 c9c:	71 05       	cpc	r23, r1
 c9e:	64 f5       	brge	.+88     	; 0xcf8 <__pack_f+0x172>
 ca0:	fb 01       	movw	r30, r22
 ca2:	e1 58       	subi	r30, 0x81	; 129
 ca4:	ff 4f       	sbci	r31, 0xFF	; 255
 ca6:	d8 01       	movw	r26, r16
 ca8:	c7 01       	movw	r24, r14
 caa:	8f 77       	andi	r24, 0x7F	; 127
 cac:	90 70       	andi	r25, 0x00	; 0
 cae:	a0 70       	andi	r26, 0x00	; 0
 cb0:	b0 70       	andi	r27, 0x00	; 0
 cb2:	80 34       	cpi	r24, 0x40	; 64
 cb4:	91 05       	cpc	r25, r1
 cb6:	a1 05       	cpc	r26, r1
 cb8:	b1 05       	cpc	r27, r1
 cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0x144>
 cbc:	e7 fe       	sbrs	r14, 7
 cbe:	0d c0       	rjmp	.+26     	; 0xcda <__pack_f+0x154>
 cc0:	80 e4       	ldi	r24, 0x40	; 64
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	a0 e0       	ldi	r26, 0x00	; 0
 cc6:	b0 e0       	ldi	r27, 0x00	; 0
 cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0x14c>
 cca:	8f e3       	ldi	r24, 0x3F	; 63
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	a0 e0       	ldi	r26, 0x00	; 0
 cd0:	b0 e0       	ldi	r27, 0x00	; 0
 cd2:	e8 0e       	add	r14, r24
 cd4:	f9 1e       	adc	r15, r25
 cd6:	0a 1f       	adc	r16, r26
 cd8:	1b 1f       	adc	r17, r27
 cda:	17 ff       	sbrs	r17, 7
 cdc:	05 c0       	rjmp	.+10     	; 0xce8 <__pack_f+0x162>
 cde:	16 95       	lsr	r17
 ce0:	07 95       	ror	r16
 ce2:	f7 94       	ror	r15
 ce4:	e7 94       	ror	r14
 ce6:	31 96       	adiw	r30, 0x01	; 1
 ce8:	87 e0       	ldi	r24, 0x07	; 7
 cea:	16 95       	lsr	r17
 cec:	07 95       	ror	r16
 cee:	f7 94       	ror	r15
 cf0:	e7 94       	ror	r14
 cf2:	8a 95       	dec	r24
 cf4:	d1 f7       	brne	.-12     	; 0xcea <__pack_f+0x164>
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <__pack_f+0x17c>
 cf8:	ee 24       	eor	r14, r14
 cfa:	ff 24       	eor	r15, r15
 cfc:	87 01       	movw	r16, r14
 cfe:	ef ef       	ldi	r30, 0xFF	; 255
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	6e 2f       	mov	r22, r30
 d04:	67 95       	ror	r22
 d06:	66 27       	eor	r22, r22
 d08:	67 95       	ror	r22
 d0a:	90 2f       	mov	r25, r16
 d0c:	9f 77       	andi	r25, 0x7F	; 127
 d0e:	d7 94       	ror	r13
 d10:	dd 24       	eor	r13, r13
 d12:	d7 94       	ror	r13
 d14:	8e 2f       	mov	r24, r30
 d16:	86 95       	lsr	r24
 d18:	49 2f       	mov	r20, r25
 d1a:	46 2b       	or	r20, r22
 d1c:	58 2f       	mov	r21, r24
 d1e:	5d 29       	or	r21, r13
 d20:	b7 01       	movw	r22, r14
 d22:	ca 01       	movw	r24, r20
 d24:	1f 91       	pop	r17
 d26:	0f 91       	pop	r16
 d28:	ff 90       	pop	r15
 d2a:	ef 90       	pop	r14
 d2c:	df 90       	pop	r13
 d2e:	08 95       	ret

00000d30 <__unpack_f>:
 d30:	fc 01       	movw	r30, r24
 d32:	db 01       	movw	r26, r22
 d34:	40 81       	ld	r20, Z
 d36:	51 81       	ldd	r21, Z+1	; 0x01
 d38:	22 81       	ldd	r18, Z+2	; 0x02
 d3a:	62 2f       	mov	r22, r18
 d3c:	6f 77       	andi	r22, 0x7F	; 127
 d3e:	70 e0       	ldi	r23, 0x00	; 0
 d40:	22 1f       	adc	r18, r18
 d42:	22 27       	eor	r18, r18
 d44:	22 1f       	adc	r18, r18
 d46:	93 81       	ldd	r25, Z+3	; 0x03
 d48:	89 2f       	mov	r24, r25
 d4a:	88 0f       	add	r24, r24
 d4c:	82 2b       	or	r24, r18
 d4e:	28 2f       	mov	r18, r24
 d50:	30 e0       	ldi	r19, 0x00	; 0
 d52:	99 1f       	adc	r25, r25
 d54:	99 27       	eor	r25, r25
 d56:	99 1f       	adc	r25, r25
 d58:	11 96       	adiw	r26, 0x01	; 1
 d5a:	9c 93       	st	X, r25
 d5c:	11 97       	sbiw	r26, 0x01	; 1
 d5e:	21 15       	cp	r18, r1
 d60:	31 05       	cpc	r19, r1
 d62:	a9 f5       	brne	.+106    	; 0xdce <__unpack_f+0x9e>
 d64:	41 15       	cp	r20, r1
 d66:	51 05       	cpc	r21, r1
 d68:	61 05       	cpc	r22, r1
 d6a:	71 05       	cpc	r23, r1
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__unpack_f+0x42>
 d6e:	82 e0       	ldi	r24, 0x02	; 2
 d70:	37 c0       	rjmp	.+110    	; 0xde0 <__unpack_f+0xb0>
 d72:	82 e8       	ldi	r24, 0x82	; 130
 d74:	9f ef       	ldi	r25, 0xFF	; 255
 d76:	13 96       	adiw	r26, 0x03	; 3
 d78:	9c 93       	st	X, r25
 d7a:	8e 93       	st	-X, r24
 d7c:	12 97       	sbiw	r26, 0x02	; 2
 d7e:	9a 01       	movw	r18, r20
 d80:	ab 01       	movw	r20, r22
 d82:	67 e0       	ldi	r22, 0x07	; 7
 d84:	22 0f       	add	r18, r18
 d86:	33 1f       	adc	r19, r19
 d88:	44 1f       	adc	r20, r20
 d8a:	55 1f       	adc	r21, r21
 d8c:	6a 95       	dec	r22
 d8e:	d1 f7       	brne	.-12     	; 0xd84 <__unpack_f+0x54>
 d90:	83 e0       	ldi	r24, 0x03	; 3
 d92:	8c 93       	st	X, r24
 d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__unpack_f+0x80>
 d96:	22 0f       	add	r18, r18
 d98:	33 1f       	adc	r19, r19
 d9a:	44 1f       	adc	r20, r20
 d9c:	55 1f       	adc	r21, r21
 d9e:	12 96       	adiw	r26, 0x02	; 2
 da0:	8d 91       	ld	r24, X+
 da2:	9c 91       	ld	r25, X
 da4:	13 97       	sbiw	r26, 0x03	; 3
 da6:	01 97       	sbiw	r24, 0x01	; 1
 da8:	13 96       	adiw	r26, 0x03	; 3
 daa:	9c 93       	st	X, r25
 dac:	8e 93       	st	-X, r24
 dae:	12 97       	sbiw	r26, 0x02	; 2
 db0:	20 30       	cpi	r18, 0x00	; 0
 db2:	80 e0       	ldi	r24, 0x00	; 0
 db4:	38 07       	cpc	r19, r24
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	48 07       	cpc	r20, r24
 dba:	80 e4       	ldi	r24, 0x40	; 64
 dbc:	58 07       	cpc	r21, r24
 dbe:	58 f3       	brcs	.-42     	; 0xd96 <__unpack_f+0x66>
 dc0:	14 96       	adiw	r26, 0x04	; 4
 dc2:	2d 93       	st	X+, r18
 dc4:	3d 93       	st	X+, r19
 dc6:	4d 93       	st	X+, r20
 dc8:	5c 93       	st	X, r21
 dca:	17 97       	sbiw	r26, 0x07	; 7
 dcc:	08 95       	ret
 dce:	2f 3f       	cpi	r18, 0xFF	; 255
 dd0:	31 05       	cpc	r19, r1
 dd2:	79 f4       	brne	.+30     	; 0xdf2 <__unpack_f+0xc2>
 dd4:	41 15       	cp	r20, r1
 dd6:	51 05       	cpc	r21, r1
 dd8:	61 05       	cpc	r22, r1
 dda:	71 05       	cpc	r23, r1
 ddc:	19 f4       	brne	.+6      	; 0xde4 <__unpack_f+0xb4>
 dde:	84 e0       	ldi	r24, 0x04	; 4
 de0:	8c 93       	st	X, r24
 de2:	08 95       	ret
 de4:	64 ff       	sbrs	r22, 4
 de6:	03 c0       	rjmp	.+6      	; 0xdee <__unpack_f+0xbe>
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	8c 93       	st	X, r24
 dec:	12 c0       	rjmp	.+36     	; 0xe12 <__unpack_f+0xe2>
 dee:	1c 92       	st	X, r1
 df0:	10 c0       	rjmp	.+32     	; 0xe12 <__unpack_f+0xe2>
 df2:	2f 57       	subi	r18, 0x7F	; 127
 df4:	30 40       	sbci	r19, 0x00	; 0
 df6:	13 96       	adiw	r26, 0x03	; 3
 df8:	3c 93       	st	X, r19
 dfa:	2e 93       	st	-X, r18
 dfc:	12 97       	sbiw	r26, 0x02	; 2
 dfe:	83 e0       	ldi	r24, 0x03	; 3
 e00:	8c 93       	st	X, r24
 e02:	87 e0       	ldi	r24, 0x07	; 7
 e04:	44 0f       	add	r20, r20
 e06:	55 1f       	adc	r21, r21
 e08:	66 1f       	adc	r22, r22
 e0a:	77 1f       	adc	r23, r23
 e0c:	8a 95       	dec	r24
 e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0xd4>
 e10:	70 64       	ori	r23, 0x40	; 64
 e12:	14 96       	adiw	r26, 0x04	; 4
 e14:	4d 93       	st	X+, r20
 e16:	5d 93       	st	X+, r21
 e18:	6d 93       	st	X+, r22
 e1a:	7c 93       	st	X, r23
 e1c:	17 97       	sbiw	r26, 0x07	; 7
 e1e:	08 95       	ret

00000e20 <__fpcmp_parts_f>:
 e20:	1f 93       	push	r17
 e22:	dc 01       	movw	r26, r24
 e24:	fb 01       	movw	r30, r22
 e26:	9c 91       	ld	r25, X
 e28:	92 30       	cpi	r25, 0x02	; 2
 e2a:	08 f4       	brcc	.+2      	; 0xe2e <__fpcmp_parts_f+0xe>
 e2c:	47 c0       	rjmp	.+142    	; 0xebc <__fpcmp_parts_f+0x9c>
 e2e:	80 81       	ld	r24, Z
 e30:	82 30       	cpi	r24, 0x02	; 2
 e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0x16>
 e34:	43 c0       	rjmp	.+134    	; 0xebc <__fpcmp_parts_f+0x9c>
 e36:	94 30       	cpi	r25, 0x04	; 4
 e38:	51 f4       	brne	.+20     	; 0xe4e <__fpcmp_parts_f+0x2e>
 e3a:	11 96       	adiw	r26, 0x01	; 1
 e3c:	1c 91       	ld	r17, X
 e3e:	84 30       	cpi	r24, 0x04	; 4
 e40:	99 f5       	brne	.+102    	; 0xea8 <__fpcmp_parts_f+0x88>
 e42:	81 81       	ldd	r24, Z+1	; 0x01
 e44:	68 2f       	mov	r22, r24
 e46:	70 e0       	ldi	r23, 0x00	; 0
 e48:	61 1b       	sub	r22, r17
 e4a:	71 09       	sbc	r23, r1
 e4c:	3f c0       	rjmp	.+126    	; 0xecc <__fpcmp_parts_f+0xac>
 e4e:	84 30       	cpi	r24, 0x04	; 4
 e50:	21 f0       	breq	.+8      	; 0xe5a <__fpcmp_parts_f+0x3a>
 e52:	92 30       	cpi	r25, 0x02	; 2
 e54:	31 f4       	brne	.+12     	; 0xe62 <__fpcmp_parts_f+0x42>
 e56:	82 30       	cpi	r24, 0x02	; 2
 e58:	b9 f1       	breq	.+110    	; 0xec8 <__fpcmp_parts_f+0xa8>
 e5a:	81 81       	ldd	r24, Z+1	; 0x01
 e5c:	88 23       	and	r24, r24
 e5e:	89 f1       	breq	.+98     	; 0xec2 <__fpcmp_parts_f+0xa2>
 e60:	2d c0       	rjmp	.+90     	; 0xebc <__fpcmp_parts_f+0x9c>
 e62:	11 96       	adiw	r26, 0x01	; 1
 e64:	1c 91       	ld	r17, X
 e66:	11 97       	sbiw	r26, 0x01	; 1
 e68:	82 30       	cpi	r24, 0x02	; 2
 e6a:	f1 f0       	breq	.+60     	; 0xea8 <__fpcmp_parts_f+0x88>
 e6c:	81 81       	ldd	r24, Z+1	; 0x01
 e6e:	18 17       	cp	r17, r24
 e70:	d9 f4       	brne	.+54     	; 0xea8 <__fpcmp_parts_f+0x88>
 e72:	12 96       	adiw	r26, 0x02	; 2
 e74:	2d 91       	ld	r18, X+
 e76:	3c 91       	ld	r19, X
 e78:	13 97       	sbiw	r26, 0x03	; 3
 e7a:	82 81       	ldd	r24, Z+2	; 0x02
 e7c:	93 81       	ldd	r25, Z+3	; 0x03
 e7e:	82 17       	cp	r24, r18
 e80:	93 07       	cpc	r25, r19
 e82:	94 f0       	brlt	.+36     	; 0xea8 <__fpcmp_parts_f+0x88>
 e84:	28 17       	cp	r18, r24
 e86:	39 07       	cpc	r19, r25
 e88:	bc f0       	brlt	.+46     	; 0xeb8 <__fpcmp_parts_f+0x98>
 e8a:	14 96       	adiw	r26, 0x04	; 4
 e8c:	8d 91       	ld	r24, X+
 e8e:	9d 91       	ld	r25, X+
 e90:	0d 90       	ld	r0, X+
 e92:	bc 91       	ld	r27, X
 e94:	a0 2d       	mov	r26, r0
 e96:	24 81       	ldd	r18, Z+4	; 0x04
 e98:	35 81       	ldd	r19, Z+5	; 0x05
 e9a:	46 81       	ldd	r20, Z+6	; 0x06
 e9c:	57 81       	ldd	r21, Z+7	; 0x07
 e9e:	28 17       	cp	r18, r24
 ea0:	39 07       	cpc	r19, r25
 ea2:	4a 07       	cpc	r20, r26
 ea4:	5b 07       	cpc	r21, r27
 ea6:	18 f4       	brcc	.+6      	; 0xeae <__fpcmp_parts_f+0x8e>
 ea8:	11 23       	and	r17, r17
 eaa:	41 f0       	breq	.+16     	; 0xebc <__fpcmp_parts_f+0x9c>
 eac:	0a c0       	rjmp	.+20     	; 0xec2 <__fpcmp_parts_f+0xa2>
 eae:	82 17       	cp	r24, r18
 eb0:	93 07       	cpc	r25, r19
 eb2:	a4 07       	cpc	r26, r20
 eb4:	b5 07       	cpc	r27, r21
 eb6:	40 f4       	brcc	.+16     	; 0xec8 <__fpcmp_parts_f+0xa8>
 eb8:	11 23       	and	r17, r17
 eba:	19 f0       	breq	.+6      	; 0xec2 <__fpcmp_parts_f+0xa2>
 ebc:	61 e0       	ldi	r22, 0x01	; 1
 ebe:	70 e0       	ldi	r23, 0x00	; 0
 ec0:	05 c0       	rjmp	.+10     	; 0xecc <__fpcmp_parts_f+0xac>
 ec2:	6f ef       	ldi	r22, 0xFF	; 255
 ec4:	7f ef       	ldi	r23, 0xFF	; 255
 ec6:	02 c0       	rjmp	.+4      	; 0xecc <__fpcmp_parts_f+0xac>
 ec8:	60 e0       	ldi	r22, 0x00	; 0
 eca:	70 e0       	ldi	r23, 0x00	; 0
 ecc:	cb 01       	movw	r24, r22
 ece:	1f 91       	pop	r17
 ed0:	08 95       	ret

00000ed2 <__prologue_saves__>:
 ed2:	2f 92       	push	r2
 ed4:	3f 92       	push	r3
 ed6:	4f 92       	push	r4
 ed8:	5f 92       	push	r5
 eda:	6f 92       	push	r6
 edc:	7f 92       	push	r7
 ede:	8f 92       	push	r8
 ee0:	9f 92       	push	r9
 ee2:	af 92       	push	r10
 ee4:	bf 92       	push	r11
 ee6:	cf 92       	push	r12
 ee8:	df 92       	push	r13
 eea:	ef 92       	push	r14
 eec:	ff 92       	push	r15
 eee:	0f 93       	push	r16
 ef0:	1f 93       	push	r17
 ef2:	cf 93       	push	r28
 ef4:	df 93       	push	r29
 ef6:	cd b7       	in	r28, 0x3d	; 61
 ef8:	de b7       	in	r29, 0x3e	; 62
 efa:	ca 1b       	sub	r28, r26
 efc:	db 0b       	sbc	r29, r27
 efe:	0f b6       	in	r0, 0x3f	; 63
 f00:	f8 94       	cli
 f02:	de bf       	out	0x3e, r29	; 62
 f04:	0f be       	out	0x3f, r0	; 63
 f06:	cd bf       	out	0x3d, r28	; 61
 f08:	09 94       	ijmp

00000f0a <__epilogue_restores__>:
 f0a:	2a 88       	ldd	r2, Y+18	; 0x12
 f0c:	39 88       	ldd	r3, Y+17	; 0x11
 f0e:	48 88       	ldd	r4, Y+16	; 0x10
 f10:	5f 84       	ldd	r5, Y+15	; 0x0f
 f12:	6e 84       	ldd	r6, Y+14	; 0x0e
 f14:	7d 84       	ldd	r7, Y+13	; 0x0d
 f16:	8c 84       	ldd	r8, Y+12	; 0x0c
 f18:	9b 84       	ldd	r9, Y+11	; 0x0b
 f1a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f1c:	b9 84       	ldd	r11, Y+9	; 0x09
 f1e:	c8 84       	ldd	r12, Y+8	; 0x08
 f20:	df 80       	ldd	r13, Y+7	; 0x07
 f22:	ee 80       	ldd	r14, Y+6	; 0x06
 f24:	fd 80       	ldd	r15, Y+5	; 0x05
 f26:	0c 81       	ldd	r16, Y+4	; 0x04
 f28:	1b 81       	ldd	r17, Y+3	; 0x03
 f2a:	aa 81       	ldd	r26, Y+2	; 0x02
 f2c:	b9 81       	ldd	r27, Y+1	; 0x01
 f2e:	ce 0f       	add	r28, r30
 f30:	d1 1d       	adc	r29, r1
 f32:	0f b6       	in	r0, 0x3f	; 63
 f34:	f8 94       	cli
 f36:	de bf       	out	0x3e, r29	; 62
 f38:	0f be       	out	0x3f, r0	; 63
 f3a:	cd bf       	out	0x3d, r28	; 61
 f3c:	ed 01       	movw	r28, r26
 f3e:	08 95       	ret

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
